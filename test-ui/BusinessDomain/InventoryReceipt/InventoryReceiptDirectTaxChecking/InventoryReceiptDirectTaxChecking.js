StartTest (function (t) {
    var myDate = new Date();
    var randomNo=Math.floor((Math.random() * 1000000) + 1);
    var productID = 'NLI-'  + randomNo + ' ' + myDate.toLocaleDateString('en-US') ;
    

    var CurrentDate = new Date();
    var nextMonth = CurrentDate.setMonth(CurrentDate.getMonth() + 1);
    nextMonth = new Date(nextMonth);

    CurrentDate = new Date();
    var dtmNextMonth = Ext.Date.format(nextMonth, 'm/d/Y H:i:s');
    var dtmCurrentDate = Ext.Date.format(CurrentDate, 'm/d/Y H:i:s');

    //randomNo=Math.floor((Math.random() * 1000000) + 1);
    var productID2 = 'LI-'  + randomNo + ' ' + myDate.toLocaleDateString('en-US') ; 
    
    new iRely.FunctionalTest().start(t)
  
    //.addFunction(function(next){
    //     new iRely.FunctionalTest().start(t, next)
    //     .addScenario('1','Create Tax Class',1000)
    //         .clickMenuFolder('Common Info')
    //         .clickMenuScreen('Tax Class')
    //         .enterGridNewRow('GridTemplate', [{column: 'strTaxClass', data: 'Tax Class '  + randomNo}])
    //         .clickButton('Save')
    //         .clickButton('Close')
    //     .addScenario('1','Create Tax Codes',1000)
    //         .clickMenuScreen('Tax Codes')
    //         .clickButton('New')
    //         .waitUntilLoaded()
    //         .enterData('Text Field','TaxCode','Tax Code '  + randomNo)
    //         .selectComboBoxRowValue('TaxClass', 'Tax Class '  + randomNo, 'TaxClassID',1)
    //         .enterData('Text Field','Description','Tax Class Description')
    //         .selectComboBoxRowValue('TaxAgency', 'Fort Wayne', 'TaxAgencyID',1)
    //         .enterData('Text Field','Address','Sample Address')
    //         .enterData('Text Field','ZipCode','46801')
    //         .enterData('Text Field','City','Fort Wayne')
    //         .enterData('Text Field','State','Indiana')
    //         .selectComboBoxRowValue('Country', 'United States', 'Country',1)
    //         .verifyCheckboxValue('MatchTaxAddress', true )
    //         .selectComboBoxRowNumber('SalesTaxAccount',1)
    //         .selectComboBoxRowNumber('PurchaseTaxAccount',1)
    //         .enterGridNewRow('TaxCodeRate', [{column: 'colEffectiveDate', data: '1/1/2015'}])
    //         .selectGridComboBoxRowValue('TaxCodeRate',1,'colCalculationMethod', 'Percentage' ,'strCalculationMethod',1) 
    //         .enterGridData('TaxCodeRate',1,'colRate',10)
    //         .clickButton('Save')
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('1','Create Tax Group',1000)
    //         .clickMenuScreen('Tax Groups')
    //         .clickButton('New')
    //         .enterData('Text Field','TaxGroup','Tax Group ' + randomNo)
    //         .enterData('Text Field','Description','Tax Group Description')
    //         .selectGridComboBoxRowValue('TaxGroup',1,'colTaxCode', 'Tax Code '  + randomNo ,'strTaxCode',1) 
    //         .clickButton('Save')
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('1','Setup Tax Group for vendor',1000)
    //         .clickMenuFolder('Purchasing (A/P)')
    //         .clickMenuScreen('Vendors')
    //         .waitUntilLoaded()
    //         .doubleClickSearchRowValue('0001005057', 'strVendorID', 1)//ABC Trucking
    //         .waitUntilLoaded()
    //         .clickTab('Locations')
    //         .waitUntilLoaded()
    //         .selectGridRowNumber('Location',1)
    //         .waitUntilLoaded()
    //         .clickButton('EditLoc')
    //         .selectComboBoxRowValue('TaxGroup', 'Tax Group ' + randomNo, 'TaxGroupId',1)
    //         .selectComboBoxRowValue('FreightTerm', 'Deliver', 'FreightTermId',1)
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')	
	// 		.waitUntilLoaded()
    //         .clickButton('Close')	
	// 		.waitUntilLoaded()
    //     .addScenario('1','Create category with tax class',1000)
    //         .clickMenuFolder('Inventory')
    //         .waitUntilLoaded()
    //         .clickMenuScreen('Categories')
    //         .waitUntilLoaded()
    //         .clickButton('New')
    //         .waitUntilLoaded()
    //         .enterData('Text Field','CategoryCode', 'Category Code ' + randomNo)	
    //         .selectComboBoxRowNumber('InventoryType', 2)
    //         //.selectComboBoxRowValue('CostingMethod', 'AVG', 'CostingMethod',1)
    //         .enterGridNewRow('Tax', [{column: 'strTaxClass', data: 'Tax Class '  + randomNo}])
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded() .waitUntilLoaded()
    //         .clickButton('Close') .waitUntilLoaded()
    //     .addScenario('1','Create inventory type item',1000)
    //         .clickMenuScreen('Items')
    //         .waitUntilLoaded()
    //         .clickButton('New')
    //         .waitUntilLoaded('icitem')
    //         .enterData('Text Field','ItemNo', productID2)
    //         .enterData('Text Field','Description', 'Sample Description')
    //         .selectComboBoxRowNumber('Commodity', 1)
    //         .selectComboBoxRowValue('Category', 'Category Code ' + randomNo, 'CategoryID',1)
    //         .selectComboBoxRowNumber('LotTracking', 1)
    //         .clickTab('Setup')    
    //         .clickButton('AddRequiredAccounts')
    //         .waitUntilLoaded()
    //         .verifyGridData('GlAccounts', 1, 'colGLAccountCategory', 'AP Clearing')
    //         .verifyGridData('GlAccounts', 2, 'colGLAccountCategory', 'Inventory')
    //         .verifyGridData('GlAccounts', 3, 'colGLAccountCategory', 'Cost of Goods')
    //         .verifyGridData('GlAccounts', 4, 'colGLAccountCategory', 'Sales Account')
    //         .verifyGridData('GlAccounts', 5, 'colGLAccountCategory', 'Inventory In-Transit')
    //         .verifyGridData('GlAccounts', 6, 'colGLAccountCategory', 'Inventory Adjustment')
    //         .selectGridComboBoxRowValue('GlAccounts', 1, 'strAccountId', '21000-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 2, 'strAccountId', '16000-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 3, 'strAccountId', '50000-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 4, 'strAccountId', '40010-0001-006', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 5, 'strAccountId', '16050-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 6, 'strAccountId', '16040-0000-000', 'strAccountId')
    //         // .addResult('======== Setup GL Accounts Successful ========')
    //         .clickTab('Location') 
    //         .clickButton('AddLocation')
    //         .waitUntilLoaded('icitemlocation')
    //         .selectComboBoxRowValue('Location', '0001-Fort Wayne', 'Location',1)    
    //         .selectComboBoxRowValue('CostingMethod', 'AVG', 'CostingMethod',1)    
    //         .selectComboBoxRowValue('SubLocation', 'Raw Station', 'SubLocation',1)    
    //         .selectComboBoxRowValue('StorageLocation', 'RM Storage', 'StorageLocation',1)
    //         .selectComboBoxRowValue('IssueUom', 'Bushels', 'IssueUom',1)  
    //         .selectComboBoxRowValue('ReceiveUom', 'Bushels', 'ReceiveUom',1)  
    //         .selectComboBoxRowNumber('NegativeInventory',0)
    //         .waitUntilLoaded().waitUntilLoaded()
    //         .clickMessageBoxButton('ok')
    //         .clickButton('Save')
    //         .clickButton('Close')
    //         .waitUntilLoaded('icitem')
    //         .clickTab('Pricing')
    //         .selectGridRowNumber('Pricing', 1)
    //         .enterGridData('Pricing',1,'colPricingStandardCost',10)
    //         .enterGridData('Pricing',1,'colPricingLastCost',10)
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('1','Create Direct Inventory Receipt',1000)
    //         .waitUntilLoaded()
    //         .clickMenuScreen('Inventory Receipts')
    //         .clickButton('New')
    //         .waitUntilLoaded('icinventoryreceipt')
    //         .selectComboBoxRowNumber('ReceiptType',4) 
    //         .selectComboBoxRowValue('Vendor', 'ABC Trucking', 'Vendor',1) 
    //         .clickButton('InsertInventoryReceipt')
    //         .selectGridComboBoxRowValue('InventoryReceipt', 1, 'colItemNo', productID2, 'strItemNo')
    //         .waitUntilLoaded()
    //         .enterUOMGridData('InventoryReceipt', 1, 'colUOMQtyToReceive', 'strUnitMeasure',500, 'Bushels')
    //         .selectGridComboBoxRowValue('InventoryReceipt',1,'colItemTaxGroup', 'Tax Group ' + randomNo ,'strTaxGroup',1) 
    //         .selectGridComboBoxRowValue('InventoryReceipt', 1, 'colStorageLocation', 'RM Storage', 'strStorageLocationName')
    //         .selectGridRowNumber('LotTracking', 1)
    //         .enterGridData('LotTracking',1,'colLotId','LOT-01' + '[TAB]')
    //         .enterGridData('LotTracking',1,'colLotQuantity',500 +'[ENTER]')
    //         .clickTab('Post Preview').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickButton('Post').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickTab('Unpost Preview').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickButton('Unpost').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickTab('Details')
    //         .clickButton('Post').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .addFunction(function(next){
    //             var total = Ext.WindowManager.getActive().down('#txtSubTotal').rawValue;
    //             var tax = (10 / 100) * parseFloat(total.replace(',','').replace(' ',''));
    //             var txtValue = Ext.WindowManager.getActive().down('#txtTax').rawValue;
    //             var result = 'fail';
    //             if(Math.round(parseFloat(tax)) == Math.round(parseFloat(txtValue.replace(',','').replace(' ','')))){
    //                 result ='success';
    //             }
    //             new iRely.FunctionalTest().start(t, next)
    //             .waitUntilLoaded()
    //             .continueIf({
    //                         expected: 'success',
    //                         actual: function(string){
    //                             return result;
    //                         },
    //                         success: function(next){
    //                             new iRely.FunctionalTest().start(t, next)
    //                             //.addResult('P')
    //                             .done()
    //                         },
    //                         continueOnFail: true,
    //                         successMessage : 'Percentage Tax Computation is correct.',
    //                         failMessage: 'Percentage Tax computation fail.'
    //                         })        

    //             .done()  
    //         })
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')           
    //         .done()
    // })
    // .addFunction(function(next){
    //     var myDate = new Date();
    //     var randomNo=Math.floor((Math.random() * 1000000) + 1);
    //     var productID = 'NLI-'  + randomNo + ' ' + myDate.toLocaleDateString('en-US') ;
    //     var productID2 = 'LI-'  + randomNo + ' ' + myDate.toLocaleDateString('en-US') ; 
    //     new iRely.FunctionalTest().start(t, next)
    //     .addScenario('2','Create Tax Class',1000)
    //         .clickMenuFolder('Common Info')
    //         .clickMenuScreen('Tax Class')
    //         .enterGridNewRow('GridTemplate', [{column: 'strTaxClass', data: 'Tax Class '  + randomNo}])
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('2','Create Tax Codes',1000)
    //         .clickMenuScreen('Tax Codes')
    //         .clickButton('New')
    //         .waitUntilLoaded()
    //         .enterData('Text Field','TaxCode','Tax Code '  + randomNo)
    //         .selectComboBoxRowValue('TaxClass', 'Tax Class '  + randomNo, 'TaxClassID',1)
    //         .enterData('Text Field','Description','Tax Class Description')
    //         .selectComboBoxRowValue('TaxAgency', 'Fort Wayne', 'TaxAgencyID',1)
    //         .enterData('Text Field','Address','Sample Address')
    //         .enterData('Text Field','ZipCode','46801')
    //         .enterData('Text Field','City','Fort Wayne')
    //         .enterData('Text Field','State','Indiana')
    //         .selectComboBoxRowValue('Country', 'United States', 'Country',1)
    //         .verifyCheckboxValue('MatchTaxAddress', true )
    //         .selectComboBoxRowNumber('SalesTaxAccount',1)
    //         .selectComboBoxRowNumber('PurchaseTaxAccount',1)
    //         .enterGridNewRow('TaxCodeRate', [{column: 'colEffectiveDate', data: '1/1/2015'}])
    //         .selectGridComboBoxRowValue('TaxCodeRate',1,'colCalculationMethod', 'Unit' ,'strCalculationMethod',1)
    //         .selectGridComboBoxRowValue('TaxCodeRate',1,'colUnitMeasure', 'Bushels' ,'strUnitMeasure',1)  
    //         .enterGridData('TaxCodeRate',1,'colRate',.02)
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('2','Create Tax Group',1000)
    //         .clickMenuScreen('Tax Groups')
    //         .clickButton('New')
    //         .enterData('Text Field','TaxGroup','Tax Group ' + randomNo)
    //         .enterData('Text Field','Description','Tax Group Description')
    //         .selectGridComboBoxRowValue('TaxGroup',1,'colTaxCode', 'Tax Code '  + randomNo ,'strTaxCode',1) 
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('2','Setup Tax Group for vendor',1000)
    //         .clickMenuFolder('Purchasing (A/P)')
    //         .clickMenuScreen('Vendors')
    //         .waitUntilLoaded()
    //         .doubleClickSearchRowValue('0001005057', 'strVendorID', 1)//ABC Trucking
    //         .waitUntilLoaded()
    //         .clickTab('Locations')
    //         .waitUntilLoaded()
    //         .selectGridRowNumber('Location',1)
    //         .waitUntilLoaded()
    //         // .clickButton('EditLoc')
    //         // .waitUntilLoaded()
           
    //         // .waitUntilLoaded()
    //         // .selectComboBoxRowValue('TaxGroup', 'Tax Group ' + randomNo, 'TaxGroupId',1)
    //         // .selectComboBoxRowValue('FreightTerm', 'Deliver', 'FreightTermId',1)
           
    //         // .waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
            
    //         // .continueIf({
    //         //     expected: 1,
    //         //     actual: function(win){
    //         //         return 1
    //         //     },
    //         //     success: function(next){
    //         //         new iRely.FunctionalTest().start(t, next)
    //         //             .clickButton('Close')
    //         //             .addFunction(function(next){
    //         //                     try {
    //         //                         var msg = document.querySelector('.sweet-alert'),
    //         //                             message = msg.querySelector('p').innerHTML;
    //         //                         if (msg){
    //         //                             if(msg.querySelector('p').innerHTML === message){
    //         //                             new iRely.FunctionalTest().start(t, next)
    //         //                             .verifyMessageBox('iRely i21', msg.querySelector('p').innerHTML, 'yesnocancel', 'warning')
    //         //                             .displayText(msg.querySelector('p').innerHTML)
    //         //                             .waitUntilLoaded()
    //         //                             .waitUntilLoaded()
    //         //                             .clickMessageBoxButton('yes')
    //         //                             .done()
    //         //                             }else{
    //         //                                 new iRely.FunctionalTest().start(t, next)
    //         //                                 .displayText('Skip message')
    //         //                                 .done()
    //         //                             }
                                
    //         //                     }    
    //         //                     } catch (error) {
                                    
    //         //                     }
                                
    //         //             })

    //         //             .done()
    //         //     },
    //         //     continueOnFail: true,
             
    //         // })
    //         // // .addFunction(function (next) {
    //         // //     t.chain(
    //         // //         { click : "ementitylocation(true):root(2) tool[type=close] => .x-tool-tool-el" }
    //         // //     )
    //         // //     next();
    //         // // })

    //         .waitUntilLoaded()
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')	
    //         .waitUntilLoaded()
    //         .clickButton('Close')
	// 		.waitUntilLoaded()
    //     .addScenario('2','Create category with tax class',1000)
    //         .clickMenuFolder('Inventory')
    //         .waitUntilLoaded()
    //         .clickMenuScreen('Categories')
    //         .waitUntilLoaded()
    //         .clickButton('New')
    //         .waitUntilLoaded()
    //         .enterData('Text Field','CategoryCode', 'Category Code ' + randomNo)	
    //         .selectComboBoxRowNumber('InventoryType', 2)
    //         //.selectComboBoxRowValue('CostingMethod', 'AVG', 'CostingMethod',1)
    //         .enterGridNewRow('Tax', [{column: 'strTaxClass', data: 'Tax Class '  + randomNo}])
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('2','Create inventory type item',1000)
    //         .clickMenuScreen('Items')
    //         .waitUntilLoaded()
    //         .clickButton('New')
    //         .waitUntilLoaded('icitem')
    //         .enterData('Text Field','ItemNo', productID2)
    //         .enterData('Text Field','Description', 'Sample Description')
    //         .selectComboBoxRowNumber('Commodity', 1)
    //         .selectComboBoxRowValue('Category', 'Category Code ' + randomNo, 'CategoryID',1)
    //         .selectComboBoxRowNumber('LotTracking', 1)
    //         .clickTab('Setup')    
    //         .clickButton('AddRequiredAccounts')
    //         .waitUntilLoaded()
    //         .verifyGridData('GlAccounts', 1, 'colGLAccountCategory', 'AP Clearing')
    //         .verifyGridData('GlAccounts', 2, 'colGLAccountCategory', 'Inventory')
    //         .verifyGridData('GlAccounts', 3, 'colGLAccountCategory', 'Cost of Goods')
    //         .verifyGridData('GlAccounts', 4, 'colGLAccountCategory', 'Sales Account')
    //         .verifyGridData('GlAccounts', 5, 'colGLAccountCategory', 'Inventory In-Transit')
    //         .verifyGridData('GlAccounts', 6, 'colGLAccountCategory', 'Inventory Adjustment')
    //         .selectGridComboBoxRowValue('GlAccounts', 1, 'strAccountId', '21000-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 2, 'strAccountId', '16000-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 3, 'strAccountId', '50000-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 4, 'strAccountId', '40010-0001-006', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 5, 'strAccountId', '16050-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 6, 'strAccountId', '16040-0000-000', 'strAccountId')
    //         // .addResult('======== Setup GL Accounts Successful ========')
    //         .clickTab('Location') 
    //         .clickButton('AddLocation')
    //         .waitUntilLoaded('icitemlocation')
    //         .selectComboBoxRowValue('Location', '0001-Fort Wayne', 'Location',1)    
    //         .selectComboBoxRowValue('CostingMethod', 'AVG', 'CostingMethod',1)    
    //         .selectComboBoxRowValue('SubLocation', 'Raw Station', 'SubLocation',1)    
    //         .selectComboBoxRowValue('StorageLocation', 'RM Storage', 'StorageLocation',1)
    //         .selectComboBoxRowValue('IssueUom', 'Bushels', 'IssueUom',1)  
    //         .selectComboBoxRowValue('ReceiveUom', 'Bushels', 'ReceiveUom',1)  
    //         .selectComboBoxRowNumber('NegativeInventory',0)
    //         .waitUntilLoaded().waitUntilLoaded()  
    //         .clickMessageBoxButton('ok')  
    //         .clickButton('Save')
    //         .clickButton('Close')
    //         .waitUntilLoaded('icitem')
    //         .clickTab('Pricing')
    //         .selectGridRowNumber('Pricing', 1)
    //         .enterGridData('Pricing',1,'colPricingStandardCost',10)
    //         .enterGridData('Pricing',1,'colPricingLastCost',10)
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('2','Create Direct Inventory Receipt',1000)
    //         .waitUntilLoaded()
    //         .clickMenuScreen('Inventory Receipts')
    //         .clickButton('New')
    //         .waitUntilLoaded('icinventoryreceipt')
    //         .selectComboBoxRowNumber('ReceiptType',4) 
    //         .selectComboBoxRowValue('Vendor', 'ABC Trucking', 'Vendor',1) 
    //         .clickButton('InsertInventoryReceipt')
    //         .selectGridComboBoxRowValue('InventoryReceipt', 1, 'colItemNo', productID2, 'strItemNo')
    //         .waitUntilLoaded()
    //         .enterUOMGridData('InventoryReceipt', 1, 'colUOMQtyToReceive', 'strUnitMeasure',500, 'Bushels')
    //         .selectGridComboBoxRowValue('InventoryReceipt',1,'colItemTaxGroup', 'Tax Group ' + randomNo ,'strTaxGroup',1) 
    //         .selectGridComboBoxRowValue('InventoryReceipt', 1, 'colStorageLocation', 'RM Storage', 'strStorageLocationName')
    //         .selectGridRowNumber('LotTracking', 1)
    //         .enterGridData('LotTracking',1,'colLotId','LOT-01' + '[TAB]')
    //         .enterGridData('LotTracking',1,'colLotQuantity',500 +'[ENTER]')
    //         .clickTab('Post Preview').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickButton('Post').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickTab('Unpost Preview').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickButton('Unpost').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickTab('Details')
    //         .clickButton('Post').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .addFunction(function(next){
    //              var total = Ext.WindowManager.getActive().down('#txtSubTotal').rawValue;
    //             var tax = parseFloat(500)  * parseFloat(.02);
    //             var txtValue = Ext.WindowManager.getActive().down('#txtTax').rawValue;
    //             var result = 'fail';
    //             if(parseFloat(tax) == parseFloat(txtValue.replace(',','').replace(' ',''))){
    //             result ='success';
    //             }
    //             new iRely.FunctionalTest().start(t, next)
    //             //.waitUntilLoaded()
    //                 // .displayText(total.toString())
    //                 // .displayText(IRDetail.taxCodeRate.toString())
    //                 // .displayText(tax.toString())
    //                 // .displayText(txtValue.toString())
    //             .continueIf({
    //                         expected: 'success',
    //                         actual: function(string){
    //                             return result;
    //                         },
    //                         success: function(next){
    //                             new iRely.FunctionalTest().start(t, next)
                                
    //                             .done()
    //                         },
    //                         continueOnFail: true,
    //                         successMessage : 'Unit Tax Computation is correct.',
    //                         failMessage: 'Unit Tax computation fail.'
    //                     })        

    //             .done()   
    //         }) 
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')           
    //         .done()
    // })
    // .addFunction(function(next){
    //     var myDate = new Date();
    //     var randomNo=Math.floor((Math.random() * 1000000) + 1);
    //     var productID = 'NLI-'  + randomNo + ' ' + myDate.toLocaleDateString('en-US') ;
    //     var productID2 = 'LI-'  + randomNo + ' ' + myDate.toLocaleDateString('en-US') ; 
    //     new iRely.FunctionalTest().start(t, next)
    //     .addScenario('3','Create Tax Class',1000)
    //         .clickMenuFolder('Common Info')
    //         .clickMenuScreen('Tax Class')
    //         .enterGridNewRow('GridTemplate', [{column: 'strTaxClass', data: 'Tax Class '  + randomNo}])
    //         .clickButton('Save')
    //         .clickButton('Close')
    //     .addScenario('3','Create Tax Codes',1000)
    //         .clickMenuScreen('Tax Codes')
    //         .clickButton('New')
    //         .waitUntilLoaded()
    //         .enterData('Text Field','TaxCode','Tax Code '  + randomNo)
    //         .selectComboBoxRowValue('TaxClass', 'Tax Class '  + randomNo, 'TaxClassID',1)
    //         .enterData('Text Field','Description','Tax Class Description')
    //         .selectComboBoxRowValue('TaxAgency', 'Fort Wayne', 'TaxAgencyID',1)
    //         .enterData('Text Field','Address','Sample Address')
    //         .enterData('Text Field','ZipCode','46801')
    //         .enterData('Text Field','City','Fort Wayne')
    //         .enterData('Text Field','State','Indiana')
    //         .selectComboBoxRowValue('Country', 'United States', 'Country',1)
    //         .verifyCheckboxValue('MatchTaxAddress', true )
    //         .selectComboBoxRowNumber('SalesTaxAccount',1)
    //         .selectComboBoxRowNumber('PurchaseTaxAccount',1)
    //         .enterGridNewRow('TaxCodeRate', [{column: 'colEffectiveDate', data: '1/1/2015'}])
    //         .selectGridComboBoxRowValue('TaxCodeRate',1,'colCalculationMethod', 'Percentage' ,'strCalculationMethod',1) 
    //         .enterGridData('TaxCodeRate',1,'colRate',10)
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('3','Create Tax Group',1000)
    //         .clickMenuScreen('Tax Groups')
    //         .clickButton('New')
    //         .enterData('Text Field','TaxGroup','Tax Group ' + randomNo)
    //         .enterData('Text Field','Description','Tax Group Description')
    //         .selectGridComboBoxRowValue('TaxGroup',1,'colTaxCode', 'Tax Code '  + randomNo ,'strTaxCode',1) 
    //         .clickButton('Save')
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('3','Setup Tax Group for vendor',1000)
    //         .clickMenuFolder('Purchasing (A/P)')
    //         .clickMenuScreen('Vendors')
    //         .waitUntilLoaded()
    //         .doubleClickSearchRowValue('0001005057', 'strVendorID', 1)//ABC Trucking
    //         .waitUntilLoaded()
    //         // .clickTab('Locations')
    //         // .waitUntilLoaded()
    //         // .selectGridRowNumber('Location',1)
    //         // .waitUntilLoaded()
    //         // .clickButton('EditLoc')
    //         // .selectComboBoxRowValue('TaxGroup', 'Tax Group ' + randomNo, 'TaxGroupId',1)
    //         // .selectComboBoxRowValue('FreightTerm', 'Deliver', 'FreightTermId',1)
    //         // .clickButton('Save')
    //         // .waitUntilLoaded()
    //         // .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')	
    //         .waitUntilLoaded()
    //         .clickButton('Close')
	// 		.waitUntilLoaded()
    //     .addScenario('3','Create category with tax class',1000)
    //         .clickMenuFolder('Inventory')
    //         .waitUntilLoaded()
    //         .clickMenuScreen('Categories')
    //         .waitUntilLoaded()
    //         .clickButton('New')
    //         .waitUntilLoaded()
    //         .enterData('Text Field','CategoryCode', 'Category Code ' + randomNo)	
    //         .selectComboBoxRowNumber('InventoryType', 2)
    //         //.selectComboBoxRowValue('CostingMethod', 'AVG', 'CostingMethod',1)
    //         .enterGridNewRow('Tax', [{column: 'strTaxClass', data: 'Tax Class '  + randomNo}])
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('3','Create inventory type item',1000)
    //         .clickMenuScreen('Items')
    //         .waitUntilLoaded()
    //         .clickButton('New')
    //         .waitUntilLoaded('icitem')
    //         .enterData('Text Field','ItemNo', productID2)
    //         .enterData('Text Field','Description', 'Sample Description')
    //         .selectComboBoxRowNumber('Commodity', 1)
    //         .selectComboBoxRowValue('Category', 'Category Code ' + randomNo, 'CategoryID',1)
    //         .selectComboBoxRowNumber('LotTracking', 1)
    //         .clickTab('Setup')    
    //         .clickButton('AddRequiredAccounts')
    //         .waitUntilLoaded()
    //         .verifyGridData('GlAccounts', 1, 'colGLAccountCategory', 'AP Clearing')
    //         .verifyGridData('GlAccounts', 2, 'colGLAccountCategory', 'Inventory')
    //         .verifyGridData('GlAccounts', 3, 'colGLAccountCategory', 'Cost of Goods')
    //         .verifyGridData('GlAccounts', 4, 'colGLAccountCategory', 'Sales Account')
    //         .verifyGridData('GlAccounts', 5, 'colGLAccountCategory', 'Inventory In-Transit')
    //         .verifyGridData('GlAccounts', 6, 'colGLAccountCategory', 'Inventory Adjustment')
    //         .selectGridComboBoxRowValue('GlAccounts', 1, 'strAccountId', '21000-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 2, 'strAccountId', '16000-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 3, 'strAccountId', '50000-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 4, 'strAccountId', '40010-0001-006', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 5, 'strAccountId', '16050-0000-000', 'strAccountId')
    //         .selectGridComboBoxRowValue('GlAccounts', 6, 'strAccountId', '16040-0000-000', 'strAccountId')
    //         // .addResult('======== Setup GL Accounts Successful ========')
    //         .clickTab('Location') 
    //         .clickButton('AddLocation')
    //         .waitUntilLoaded('icitemlocation')
    //         .selectComboBoxRowValue('Location', '0001-Fort Wayne', 'Location',1)    
    //         .selectComboBoxRowValue('CostingMethod', 'AVG', 'CostingMethod',1)    
    //         .selectComboBoxRowValue('SubLocation', 'Raw Station', 'SubLocation',1)    
    //         .selectComboBoxRowValue('StorageLocation', 'RM Storage', 'StorageLocation',1)
    //         .selectComboBoxRowValue('IssueUom', 'Bushels', 'IssueUom',1)  
    //         .selectComboBoxRowValue('ReceiveUom', 'Bushels', 'ReceiveUom',1)  
    //         .selectComboBoxRowNumber('NegativeInventory',0)
    //         .waitUntilLoaded().waitUntilLoaded()
    //         .clickMessageBoxButton('ok')    
    //         .clickButton('Save')
    //         .clickButton('Close')
    //         .waitUntilLoaded('icitem')
    //         .clickTab('Pricing')
    //         .selectGridRowNumber('Pricing', 1)
    //         .enterGridData('Pricing',1,'colPricingStandardCost',10)
    //         .enterGridData('Pricing',1,'colPricingLastCost',10)
    //         .clickButton('Save')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //         .waitUntilLoaded()
    //         .clickButton('Close')
    //     .addScenario('3','Create Direct Inventory Receipt',1000)
    //         .waitUntilLoaded()
    //         .clickMenuScreen('Inventory Receipts')
    //         .clickButton('New')
    //         .waitUntilLoaded('icinventoryreceipt')
    //         .selectComboBoxRowNumber('ReceiptType',4) 
    //         .selectComboBoxRowValue('Vendor', 'ABC Trucking', 'Vendor',1) 
    //         .clickButton('InsertInventoryReceipt')
    //         .selectGridComboBoxRowValue('InventoryReceipt', 1, 'colItemNo', productID2, 'strItemNo')
    //         .waitUntilLoaded()
    //         .enterUOMGridData('InventoryReceipt', 1, 'colUOMQtyToReceive', 'strUnitMeasure',100, 'KG')
    //         .selectGridComboBoxRowValue('InventoryReceipt',1,'colItemTaxGroup', 'Tax Group ' + randomNo ,'strTaxGroup',1) 
    //         .selectGridComboBoxRowValue('InventoryReceipt', 1, 'colStorageLocation', 'RM Storage', 'strStorageLocationName')
    //         .selectGridRowNumber('LotTracking', 1)
    //         .enterGridData('LotTracking',1,'colLotId','LOT-01' + '[TAB]')
    //         .enterGridData('LotTracking',1,'colLotQuantity',100 +'[ENTER]')
    //         .clickTab('Post Preview').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickButton('Post').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickTab('Unpost Preview').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickButton('Unpost').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .clickTab('Details')
    //         .clickButton('Post').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
    //         .addFunction(function(next){
    //             var total = Ext.WindowManager.getActive().down('#txtSubTotal').rawValue;
    //             var tax = (10 / 100) * parseFloat(total.replace(',','').replace(' ',''));
    //             var txtValue = Ext.WindowManager.getActive().down('#txtTax').rawValue;
    //             var result = 'fail';
    //             if(Math.round(parseFloat(tax)) == Math.round(parseFloat(txtValue.replace(',','').replace(' ','')))){
    //                 result ='success';
    //             }
    //             new iRely.FunctionalTest().start(t, next)
    //             .waitUntilLoaded()
    //             .continueIf({
    //                         expected: 'success',
    //                         actual: function(string){
    //                             return result;
    //                         },
    //                         success: function(next){
    //                             new iRely.FunctionalTest().start(t, next)
    //                             //.addResult('P')
    //                             .done()
    //                         },
    //                         continueOnFail: true,
    //                         successMessage : 'Percentage Tax Computation is correct.',
    //                         failMessage: 'Percentage Tax computation fail.'
    //                         })        

    //             .done()  
    //     })
    //     .clickButton('Close')
    //     .waitUntilLoaded()
    //     .clickButton('Close')           
    //     .done()
    // })
    .addFunction(function(next){
        var myDate = new Date();
        var randomNo=Math.floor((Math.random() * 1000000) + 1);
        var productID = 'NLI-'  + randomNo + ' ' + myDate.toLocaleDateString('en-US') ;
        var productID2 = 'LI-'  + randomNo + ' ' + myDate.toLocaleDateString('en-US') ; 
        new iRely.FunctionalTest().start(t, next)
        .addScenario('4','Create Tax Class',1000)
            .clickMenuFolder('Common Info')
            .clickMenuScreen('Tax Class')
            .enterGridNewRow('GridTemplate', [{column: 'strTaxClass', data: 'Tax Class '  + randomNo}])
            .clickButton('Save')
            .clickButton('Close')
        .addScenario('4','Create Tax Codes',1000)
            .clickMenuScreen('Tax Codes')
            .clickButton('New')
            .waitUntilLoaded()
            .enterData('Text Field','TaxCode','Tax Code '  + randomNo)
            .selectComboBoxRowValue('TaxClass', 'Tax Class '  + randomNo, 'TaxClassID',1)
            .enterData('Text Field','Description','Tax Class Description')
            .selectComboBoxRowValue('TaxAgency', 'Fort Wayne', 'TaxAgencyID',1)
            .enterData('Text Field','Address','Sample Address')
            .enterData('Text Field','ZipCode','46801')
            .enterData('Text Field','City','Fort Wayne')
            .enterData('Text Field','State','Indiana')
            .selectComboBoxRowValue('Country', 'United States', 'Country',1)
            .verifyCheckboxValue('MatchTaxAddress', true )
            .selectComboBoxRowNumber('SalesTaxAccount',1)
            .selectComboBoxRowNumber('PurchaseTaxAccount',1)
            .enterGridNewRow('TaxCodeRate', [{column: 'colEffectiveDate', data: '1/1/2015'}])
            .selectGridComboBoxRowValue('TaxCodeRate',1,'colCalculationMethod', 'Percentage' ,'strCalculationMethod',1) 
            .enterGridData('TaxCodeRate',1,'colRate',10)
            .clickButton('Save')
            .clickButton('Close')
            .waitUntilLoaded()
            .clickButton('Close')
        .addScenario('4','Create Tax Group',1000)
            .clickMenuScreen('Tax Groups')
            .clickButton('New')
            .enterData('Text Field','TaxGroup','Tax Group ' + randomNo)
            .enterData('Text Field','Description','Tax Group Description')
            .selectGridComboBoxRowValue('TaxGroup',1,'colTaxCode', 'Tax Code '  + randomNo ,'strTaxCode',1) 
            .clickButton('Save')
            .clickButton('Close')
            .waitUntilLoaded()
            .clickButton('Close')
        .addScenario('4','Tax Group for location',1000)
            // //.clickMenuFolder('Common Info')
            .clickMenuScreen('Company Locations')
            .waitUntilLoaded()
            //.doubleClickSearchRowValue('0001 - Fort Wayne', 'strLocationName', 1)
            .addFunction(function (next) {
                t.chain(
                    { click : "#floatingPnlIntegratedDashboard #searchTabPanel panel[title=Company Locations]#mainTab #grdSearch #pnlFilter #con0 #cboColumns => .x-form-text" }
                    
                    
                )
                next();
            })
            .doubleClickSearchRowValue('0001-Fort Wayne', 'strLocationName', 1)
            .waitUntilLoaded()
            .clickTab('Setup')
            .waitUntilLoaded()
            //.selectComboBoxRowValue('TaxGroup', 'IN', 'TaxGroupId',1)
            .selectComboBoxRowValue('TaxGroup', 'Tax Group ' + randomNo, 'TaxGroupId',1)
            .waitUntilLoaded()
            .clickButton('Save')
            .waitUntilLoaded()
            .clickButton('Close')
            .waitUntilLoaded()
            .clickButton('Close')
        .addScenario('4','Setup Tax Group for vendor',1000)
            .clickMenuFolder('Purchasing (A/P)')
            .clickMenuScreen('Vendors')
            .waitUntilLoaded()
            .doubleClickSearchRowValue('0001005057', 'strVendorID', 1)//ABC Trucking
            .waitUntilLoaded()
            // .clickTab('Locations')
            // .waitUntilLoaded()
            // .selectGridRowNumber('Location',1)
            // .waitUntilLoaded()
            // .clickButton('EditLoc')
            // .selectComboBoxRowValue('TaxGroup', 'Tax Group ' + randomNo, 'TaxGroupId',1)
            // .selectComboBoxRowValue('FreightTerm', 'Deliver', 'FreightTermId',1)
            // .clickButton('Save')
            // .waitUntilLoaded()
            // .clickButton('Close')
            .waitUntilLoaded()
            .clickButton('Save')
            .waitUntilLoaded()
            .clickButton('Close')	
			.waitUntilLoaded()
            .clickButton('Close')	
			.waitUntilLoaded()
        .addScenario('4','Create category with tax class',1000)
            .clickMenuFolder('Inventory')
            .waitUntilLoaded()
            .clickMenuScreen('Categories')
            .waitUntilLoaded()
            .clickButton('New')
            .waitUntilLoaded()
            .enterData('Text Field','CategoryCode', 'Category Code ' + randomNo)	
            .selectComboBoxRowNumber('InventoryType', 2)
            //.selectComboBoxRowValue('CostingMethod', 'AVG', 'CostingMethod',1)
            .enterGridNewRow('Tax', [{column: 'strTaxClass', data: 'Tax Class '  + randomNo }])
            .clickButton('Save')
            .waitUntilLoaded()
            .clickButton('Close')
             .waitUntilLoaded()
            .clickButton('Close')
        .addScenario('4','Create inventory type item',1000)
            .clickMenuScreen('Items')
            .waitUntilLoaded()
            .clickButton('New')
            .waitUntilLoaded('icitem')
            .enterData('Text Field','ItemNo', productID2)
            .enterData('Text Field','Description', 'Sample Description')
            .selectComboBoxRowNumber('Commodity', 1)
            .selectComboBoxRowValue('Category', 'Category Code ' + randomNo, 'CategoryID',1)
            .selectComboBoxRowNumber('LotTracking', 1)
            //.enterData('Text Field','FilterGrid', 'LB[ENTER]')
            // .clickGridCheckBox('UnitOfMeasure',5 , 'strUnitMeasure', 'LB', 'ysnStockUnit', true)
            // .addFunction(function(next){
            //     var msg = document.querySelector('.sweet-alert'),
            //         message = msg.querySelector('p').innerHTML;
            //     if (msg){
            //         if(msg.querySelector('p').innerHTML === message){
            //         new iRely.FunctionalTest().start(t, next)
            //         .verifyMessageBox('iRely i21', msg.querySelector('p').innerHTML, 'yesnocancel', 'warning')
            //         .displayText(msg.querySelector('p').innerHTML)
            //         .waitUntilLoaded()
            //         .waitUntilLoaded()
            //         .clickMessageBoxButton('yes')
            //         .done()
            //         }else{
            //             new iRely.FunctionalTest().start(t, next)
            //             .displayText('Skip message')
            //             .done()
            //         }
            //     }
            // })
            // .addFunction(function(next){
            //     var msg = document.querySelector('.sweet-alert'),
            //         message = msg.querySelector('p').innerHTML;
            //     if (msg){
            //         if(msg.querySelector('p').innerHTML === message){
            //         new iRely.FunctionalTest().start(t, next)
            //         .verifyMessageBox('iRely i21', msg.querySelector('p').innerHTML, 'ok', 'information')
            //         .displayText(msg.querySelector('p').innerHTML)
            //         .waitUntilLoaded()
            //         .waitUntilLoaded()
            //         .clickMessageBoxButton('ok')
            //         .done()
            //         }else{
            //             new iRely.FunctionalTest().start(t, next)
            //             .displayText('Skip message')
            //             .done()
            //         }
            //     }
            // })
            .clickTab('Setup')    
            .clickButton('AddRequiredAccounts')
            .waitUntilLoaded()
            .verifyGridData('GlAccounts', 1, 'colGLAccountCategory', 'AP Clearing')
            .verifyGridData('GlAccounts', 2, 'colGLAccountCategory', 'Inventory')
            .verifyGridData('GlAccounts', 3, 'colGLAccountCategory', 'Cost of Goods')
            .verifyGridData('GlAccounts', 4, 'colGLAccountCategory', 'Sales Account')
            .verifyGridData('GlAccounts', 5, 'colGLAccountCategory', 'Inventory In-Transit')
            .verifyGridData('GlAccounts', 6, 'colGLAccountCategory', 'Inventory Adjustment')
            .selectGridComboBoxRowValue('GlAccounts', 1, 'strAccountId', '21000-0000-000', 'strAccountId')
            .selectGridComboBoxRowValue('GlAccounts', 2, 'strAccountId', '16000-0000-000', 'strAccountId')
            .selectGridComboBoxRowValue('GlAccounts', 3, 'strAccountId', '50000-0000-000', 'strAccountId')
            .selectGridComboBoxRowValue('GlAccounts', 4, 'strAccountId', '40010-0001-006', 'strAccountId')
            .selectGridComboBoxRowValue('GlAccounts', 5, 'strAccountId', '16050-0000-000', 'strAccountId')
            .selectGridComboBoxRowValue('GlAccounts', 6, 'strAccountId', '16040-0000-000', 'strAccountId')
            // .addResult('======== Setup GL Accounts Successful ========')
            .clickTab('Location') 
            .clickButton('AddLocation')
            .waitUntilLoaded('icitemlocation')
            .selectComboBoxRowValue('Location', '0001-Fort Wayne', 'Location',1)    
            .selectComboBoxRowValue('CostingMethod', 'AVG', 'CostingMethod',1)    
            .selectComboBoxRowValue('SubLocation', 'Raw Station', 'SubLocation',1)    
            .selectComboBoxRowValue('StorageLocation', 'RM Storage', 'StorageLocation',1)
            .selectComboBoxRowValue('IssueUom', 'Bushels', 'IssueUom',1)  
            .selectComboBoxRowValue('ReceiveUom', 'Bushels', 'ReceiveUom',1)  
            .selectComboBoxRowNumber('NegativeInventory',0)
            .waitUntilLoaded().waitUntilLoaded() 
            .clickMessageBoxButton('ok')   
            .clickButton('Save')
            .clickButton('Close')
            .waitUntilLoaded('icitem')
            .clickTab('Pricing')
            .selectGridRowNumber('Pricing', 1)
            .enterGridData('Pricing',1,'colPricingStandardCost',10)
            .enterGridData('Pricing',1,'colPricingLastCost',10)
            .clickButton('Save')
            .waitUntilLoaded()
            .clickButton('Close')
            .waitUntilLoaded()
            .clickButton('Close')
        .addScenario('4','Create Direct Inventory Receipt',1000)
            .waitUntilLoaded()
            .clickMenuScreen('Inventory Receipts')
            .clickButton('New')
            .waitUntilLoaded('icinventoryreceipt')
            .selectComboBoxRowNumber('ReceiptType',4) 
            .selectComboBoxRowValue('Vendor', 'ABC Trucking', 'Vendor',1) 
            .clickButton('InsertInventoryReceipt')
            .selectGridComboBoxRowValue('InventoryReceipt', 1, 'colItemNo', productID2, 'strItemNo')
            .waitUntilLoaded()
            .enterUOMGridData('InventoryReceipt', 1, 'colUOMQtyToReceive', 'strUnitMeasure',1000, 'LB')
            .selectGridComboBoxRowValue('InventoryReceipt', 1, 'colCostUOM', 'LB', 'strCostUOM')
            .enterGridData('InventoryReceipt',1,'colUnitCost',10)
            .selectGridComboBoxRowValue('InventoryReceipt',1,'colItemTaxGroup', 'Tax Group ' + randomNo ,'strTaxGroup',1) 
            .selectGridComboBoxRowValue('InventoryReceipt', 1, 'colStorageLocation', 'RM Storage', 'strStorageLocationName')
            .selectGridRowNumber('LotTracking', 1)
            .enterGridData('LotTracking',1,'colLotId','LOT-01' + '[TAB]')
            .enterGridData('LotTracking',1,'colLotQuantity',1000 +'[ENTER]')

            .clickTab('FreightInvoice')
            .waitUntilLoaded()
            .selectGridComboBoxRowValue('Charges',1,'colOtherCharge', 'Freight','strItemNo',1)
            .selectGridComboBoxRowValue('Charges',1,'colCostMethod', 'Percentage','strCostMethod',2)          
            .enterGridData('Charges',1,'colRate',10)
            .selectGridComboBoxRowValue('Charges',1,'colChargeTaxGroup', 'Tax Group ' + randomNo,'strTaxGroup',1)
            .clickGridCheckBox('Charges',1 , 'strItemNo', 'Freight', 'ysnAccrue', true)
            .selectGridComboBoxRowValue('Charges',1,'colCostVendor', 'ABC Trucking','strVendorName',1)
            .clickButton('CalculateCharges')


            .clickTab('Post Preview').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
            .clickButton('Post').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
            .clickTab('Unpost Preview').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
            .clickButton('Unpost').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
            .clickTab('Details')
            .clickButton('Post').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
            .addFunction(function(next){
                var total = Ext.WindowManager.getActive().down('#txtSubTotal').rawValue;
                var tax = (10 / 100) * parseFloat(total.replace(',','').replace(' ',''));
                var txtValue = Ext.WindowManager.getActive().down('#txtTax').rawValue;
                var result = 'fail';
                if(Math.round(parseFloat(tax)) == Math.round(parseFloat(txtValue.replace(',','').replace(' ','')))){
                    result ='success';
                }
                new iRely.FunctionalTest().start(t, next)
                .waitUntilLoaded()
                .continueIf({
                            expected: 'success',
                            actual: function(string){
                                return result;
                            },
                            success: function(next){
                                new iRely.FunctionalTest().start(t, next)
                                //.addResult('P')
                                .done()
                            },
                            continueOnFail: true,
                            successMessage : 'Percentage Tax Computation is correct.',
                            failMessage: 'Percentage Tax computation fail.'
                            })        

                .done()  
        })
        .clickButton('Voucher').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
         .addFunction(function(next){
                var msg = document.querySelector('.sweet-alert'),
                    message = msg.querySelector('p').innerHTML;
                if (msg){
                    if(msg.querySelector('p').innerHTML === message){
                    new iRely.FunctionalTest().start(t, next)
                    .verifyMessageBox('iRely i21', msg.querySelector('p').innerHTML, 'yesno', 'warning')
                    .displayText(msg.querySelector('p').innerHTML)
                    .waitUntilLoaded()
                    .waitUntilLoaded()
                    .clickMessageBoxButton('yes')
                    .done()
                    }else{
                        new iRely.FunctionalTest().start(t, next)
                        .displayText('Skip message')
                        .done()
                    }
                }
            })

        .waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
        // .clickTab('Post Preview').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
        .enterData('Text Field','InvoiceNo', randomNo)
        .clickButton('Post').waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded().waitUntilLoaded()
        .clickButton('Close')
        .waitUntilLoaded()
        .clickButton('Close')           
        .done()
    })
    .done()
})