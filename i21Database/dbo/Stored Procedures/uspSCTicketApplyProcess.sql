CREATE PROCEDURE [dbo].[uspSCTicketApplyProcess]
	@intTicketApplyId INT,
	@intUserId INT 
AS 
BEGIN
/*
	Prerequisite
	- transparency record should have been craeted before calling this procedure
	- the generation of transparency record is at uspSCTicketApplyCreateTransparency
	Purpose
	- unhold a ticket transaction
	- distribute the ticket based on the allocation generated by the transparency script

*/
		
	DECLARE @TICKET_APPLY_ID INT = @intTicketApplyId
	DECLARE @ENTITY_USER_NAME NVARCHAR(100)
	-- user invoked the process
	DECLARE @USER_ID INT = @intUserId

	SELECT @ENTITY_USER_NAME = strName FROM tblEMEntity WHERE intEntityId = @intUserId
	-- temporary table to hold the ticket for manual distribution
	DECLARE @TICKET_IDS TABLE ( ID INT, [ENTITY_ID] INT, NET_UNIT NUMERIC(38, 18), TICKET_NUMBER NVARCHAR(50) COLLATE Latin1_General_CI_AS )

	-- get ticket for manual distribution
	INSERT INTO @TICKET_IDS (ID, [ENTITY_ID], NET_UNIT, TICKET_NUMBER)
	SELECT APPLY_TICKET.intTicketId, TICKET.intEntityId, TICKET.dblNetUnits, TICKET.strTicketNumber
	FROM tblSCTicketApplyTicket APPLY_TICKET
		JOIN tblSCTicket TICKET
			ON APPLY_TICKET.intTicketId = TICKET.intTicketId
	WHERE intTicketApplyId = @TICKET_APPLY_ID

	-- loop variables
	DECLARE @CURRENT_TICKET_ID INT
	DECLARE @CURRENT_ENTITY_ID INT 
	DECLARE @CURRENT_NET_UNITS NUMERIC(38, 20) 
	DECLARE @CURRENT_TICKET_NUMBER NVARCHAR(50)

	DECLARE @MANUAL_DISTRIBUTION_LOG NVARCHAR(500)

	-- temporary variables to hold the IR and Voucher id outputs
	DECLARE @InventoryReceiptId INT 
	DECLARE @intBillId INT 

	-- Starting point of the loop
	SELECT 
		@CURRENT_TICKET_ID  = MIN(ID) 
	FROM @TICKET_IDS 

	-- user table to hold the manual distribution allocation
	DECLARE @MANUAL_DISTRIBUTION AS ScaleManualCostingTableType

	-- log information
	INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
	SELECT @TICKET_APPLY_ID, 'Ticket apply process started', @ENTITY_USER_NAME, @USER_ID

	WHILE @CURRENT_TICKET_ID IS NOT NULL
	BEGIN
		-- clear the vaiables
		SELECT @CURRENT_ENTITY_ID = NULL
			, @CURRENT_NET_UNITS = NULL
			, @CURRENT_TICKET_NUMBER = NULL
			, @MANUAL_DISTRIBUTION_LOG = ''
		-- set loop variable
		SELECT 
			@CURRENT_ENTITY_ID = [ENTITY_ID]
			, @CURRENT_NET_UNITS = NET_UNIT
			, @CURRENT_TICKET_NUMBER = TICKET_NUMBER
		FROM @TICKET_IDS 
			WHERE ID = @CURRENT_TICKET_ID
		

		-- log information
		INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
		SELECT @TICKET_APPLY_ID
			, 'Process started for ticket ' + ISNULL(@CURRENT_TICKET_NUMBER, 'ticket id - ' + CAST(@CURRENT_TICKET_ID AS NVARCHAR)) 				
			, @ENTITY_USER_NAME
			, @USER_ID


		-- log information
		INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
		SELECT @TICKET_APPLY_ID
			, 'Locking the ticket for processing'
			, @ENTITY_USER_NAME
			, @USER_ID

		-- mark the ticket for processing
		EXEC uspSCCheckUpdateTicketProcessed 
			@intTicketId = @CURRENT_TICKET_ID
			, @intUserId = @USER_ID
			, @ysnStartProcess = 1

		-- log information
		INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
		SELECT @TICKET_APPLY_ID
			, 'Unhold the ticket'
			, @ENTITY_USER_NAME
			, @USER_ID

		-- invoke the unhold procedure		
		EXEC [dbo].[uspSCProcessHoldTicket] 
			@intTicketId = @CURRENT_TICKET_ID
			, @intEntityId = @CURRENT_ENTITY_ID 
			, @dblNetUnits = @CURRENT_NET_UNITS
			, @intUserId = @USER_ID
			, @strInOutFlag = 'I'
			, @ysnPost = 0
	
		-- reverse the ticket status
		UPDATE tblSCTicket 
			SET strTicketStatus = 'R'
			WHERE intTicketId = @CURRENT_TICKET_ID
		

		-- log information
		INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
		SELECT @TICKET_APPLY_ID
			, 'Started allocating the units for manual distribution'
			, @ENTITY_USER_NAME
			, @USER_ID

		-- clear the manual distribution
		-- to make sure that in each iteration, the distribution is focused on the current ticket 
		DELETE FROM @MANUAL_DISTRIBUTION
	
		-- generate the manual distribution allocations
		-- point of optimization is the row_number -- as of writing this is the best i could come up with to get a unique identification for the intId
		-- intId is not set to identity type column so we need to make sure that that number is filled with unique and ordered number
		INSERT INTO @MANUAL_DISTRIBUTION
		( intId, intItemId, intItemLocationId, intItemUOMId, dtmDate, dblQty, dblUOMQty, dblCost, dblValue, dblSalesPrice, intCurrencyId, dblExchangeRate, intTransactionId, intTransactionDetailId, strTransactionId, intTransactionTypeId, intLotId, intSubLocationId, intStorageLocationId, strDistributionOption, intStorageScheduleId, intSourceTransactionId, strSourceTransactionId, ysnIsStorage, intStorageScheduleTypeId, ysnAllowVoucher, intLoadDetailId, intItemContractDetailId, intItemContractHeaderId)
		SELECT 
		ROW_NUMBER() OVER(PARTITION BY @CURRENT_TICKET_ID  ORDER BY intType DESC) 
		, intItemId, intItemLocationId, intItemUOMId, dtmDate, dblQty, dblUOMQty, dblCost, dblValue, dblSalesPrice, intCurrencyId, dblExchangeRate, intTransactionId, intTransactionDetailId, strTransactionId, intTransactionTypeId, intLotId, intSubLocationId, intStorageLocationId, strDistributionOption, intStorageScheduleId, intSourceTransactionId, strSourceTransactionId, ysnIsStorage, intStorageScheduleTypeId, ysnAllowVoucher, intLoadDetailId, intItemContractDetailId, intItemContractHeaderId 
	
	
		FROM (
			-- contract allocation	
			SELECT 
				1 as intMarker
				, TRANSPARENCY.intType
				,intItemId = TICKET.intItemId
				, intItemLocationId = TICKET.intProcessingLocationId
				, intItemUOMId = ITEM_UOM.intItemUOMId
				, dtmDate = TICKET.dtmTicketDateTime
				, dblQty = TRANSPARENCY.dblUnit
				, dblUOMQty = 1
				, dblCost = TRANSPARENCY.dblSequenceCost
				, dblValue = 0
				, dblSalesPrice = 0
				, intCurrencyId = TICKET.intCurrencyId
				, dblExchangeRate = 1
				, intTransactionId = TICKET.intTicketId
				, intTransactionDetailId = TRANSPARENCY.intContractDetailId
				, strTransactionId = TICKET.strTicketNumber
				, intTransactionTypeId  = 3
				, intLotId = 0
				, intSubLocationId = TICKET.intSubLocationId
				, intStorageLocationId = TICKET.intStorageLocationId
				, strDistributionOption = 'CNT'
				, intStorageScheduleId = NULL
				, intSourceTransactionId = NULL
				, strSourceTransactionId = NULL
				, ysnIsStorage = CASE WHEN CONTRACT_DETAIL.intPricingTypeId = 5 THEN 1 ELSE 0 END
				, intStorageScheduleTypeId = NULL
				, ysnAllowVoucher = CASE WHEN (CONTRACT_DETAIL.intPricingTypeId = 1 OR CONTRACT_DETAIL.intPricingTypeId = 6 ) THEN 1 ELSE 0 END
				, intLoadDetailId = NULL
				, intItemContractDetailId = NULL
				, intItemContractHeaderId = NULL
			FROM vyuSCTicketApplyTransparency TRANSPARENCY
				JOIN tblSCTicket TICKET
					ON TRANSPARENCY.intTicketId = TICKET.intTicketId
				JOIN tblCTContractDetail CONTRACT_DETAIL
					on TRANSPARENCY.intContractDetailId = CONTRACT_DETAIL.intContractDetailId
				JOIN tblICItemUOM ITEM_UOM
					ON TICKET.intItemId = ITEM_UOM.intItemId
						AND ITEM_UOM.ysnStockUnit = 1
			WHERE TRANSPARENCY.intTicketId = @CURRENT_TICKET_ID 
				AND TRANSPARENCY.intTicketApplyId = @TICKET_APPLY_ID
				AND TRANSPARENCY.intType = 1
			

			-- storage allocation
			UNION ALL
			SELECT 		
				2 as intMarker
				, TRANSPARENCY.intType
				, intItemId = TICKET.intItemId
				, intItemLocationId = TICKET.intProcessingLocationId
				, intItemUOMId = ITEM_UOM.intItemUOMId
				, dtmDate = TICKET.dtmTicketDateTime
				, dblQty = TRANSPARENCY.dblUnit
				, dblUOMQty = 1
				, dblCost = TRANSPARENCY.dblSequenceCost
				, dblValue = 0
				, dblSalesPrice = 0
				, intCurrencyId = TICKET.intCurrencyId
				, dblExchangeRate = 1
				, intTransactionId = TICKET.intTicketId
				, intTransactionDetailId = NULL
				, strTransactionId = TICKET.strTicketNumber
				, intTransactionTypeId  = 3
				, intLotId = 0
				, intSubLocationId = TICKET.intSubLocationId
				, intStorageLocationId = TICKET.intStorageLocationId
				, strDistributionOption = TRANSPARENCY.strDistributionOption
				, intStorageScheduleId = TRANSPARENCY.intStorageScheduleId
				, intSourceTransactionId = NULL
				, strSourceTransactionId = NULL
				, ysnIsStorage = CASE WHEN TRANSPARENCY.ysnCustomerStorage = 0 THEN 1 ELSE 0 END
				, intStorageScheduleTypeId = TRANSPARENCY.intStorageScheduleTypeId
				, ysnAllowVoucher = 0
				, intLoadDetailId = NULL
				, intItemContractDetailId = NULL
				, intItemContractHeaderId = NULL
			FROM vyuSCTicketApplyTransparency TRANSPARENCY
				JOIN tblSCTicket TICKET
					ON TRANSPARENCY.intTicketId = TICKET.intTicketId		
				JOIN tblICItemUOM ITEM_UOM
					ON TICKET.intItemId = ITEM_UOM.intItemId
						AND ITEM_UOM.ysnStockUnit = 1
			WHERE TRANSPARENCY.intTicketId = @CURRENT_TICKET_ID 
				AND TRANSPARENCY.intTicketApplyId = @TICKET_APPLY_ID		
				AND TRANSPARENCY.intType = 2

			UNION ALL
			-- spot allocation
			SELECT 		
				1 as intMarker
				, TRANSPARENCY.intType
				, intItemId = TICKET.intItemId
				, intItemLocationId = TICKET.intProcessingLocationId
				, intItemUOMId = ITEM_UOM.intItemUOMId
				, dtmDate = TICKET.dtmTicketDateTime
				, dblQty = TRANSPARENCY.dblUnit
				, dblUOMQty = 1
				, dblCost = TRANSPARENCY.dblSequenceCost
				, dblValue = 0
				, dblSalesPrice = 0
				, intCurrencyId = TICKET.intCurrencyId
				, dblExchangeRate = 1
				, intTransactionId = TICKET.intTicketId
				, intTransactionDetailId = NULL
				, strTransactionId = TICKET.strTicketNumber
				, intTransactionTypeId  = 3
				, intLotId = 0
				, intSubLocationId = TICKET.intSubLocationId
				, intStorageLocationId = TICKET.intStorageLocationId
				, strDistributionOption = 'SPT'
				, intStorageScheduleId = NULL
				, intSourceTransactionId = NULL
				, strSourceTransactionId = NULL
				, ysnIsStorage = 0
				, intStorageScheduleTypeId = NULL
				, ysnAllowVoucher = 1
				, intLoadDetailId = NULL
				, intItemContractDetailId = NULL
				, intItemContractHeaderId = NULL
			FROM vyuSCTicketApplyTransparency TRANSPARENCY
				JOIN tblSCTicket TICKET
					ON TRANSPARENCY.intTicketId = TICKET.intTicketId		
				JOIN tblICItemUOM ITEM_UOM
					ON TICKET.intItemId = ITEM_UOM.intItemId
						AND ITEM_UOM.ysnStockUnit = 1
			WHERE TRANSPARENCY.intTicketId = @CURRENT_TICKET_ID 
				AND TRANSPARENCY.intTicketApplyId = @TICKET_APPLY_ID		
				AND TRANSPARENCY.intType = 10
		) FINAL_LIST                        
		
		
		-- insert manual distribution data to physical table
		INSERT INTO tblSCTicketManualDistribution(intTicketId, intEntityUserId, intId, intItemId, intItemLocationId, intItemUOMId, dtmDate, dblQty, dblUOMQty, dblCost, dblValue, dblSalesPrice, intCurrencyId, dblExchangeRate, intTransactionId, intTransactionDetailId, strTransactionId, intTransactionTypeId, intLotId, intSubLocationId, intStorageLocationId, strDistributionOption, intStorageScheduleId, intSourceTransactionId, strSourceTransactionId, ysnIsStorage, intStorageScheduleTypeId, ysnAllowVoucher, intLoadDetailId, intItemContractDetailId, intItemContractHeaderId)
		SELECT @CURRENT_TICKET_ID, @USER_ID, intId, intItemId, intItemLocationId, intItemUOMId, dtmDate, dblQty, dblUOMQty, dblCost, dblValue, dblSalesPrice, intCurrencyId, dblExchangeRate, intTransactionId, intTransactionDetailId, strTransactionId, intTransactionTypeId, intLotId, intSubLocationId, intStorageLocationId, strDistributionOption, intStorageScheduleId, intSourceTransactionId, strSourceTransactionId, ysnIsStorage, intStorageScheduleTypeId, ysnAllowVoucher, intLoadDetailId, intItemContractDetailId, intItemContractHeaderId FROM @MANUAL_DISTRIBUTION

		-- log information
		INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
		SELECT @TICKET_APPLY_ID
			, 'Manual distribution started - ' + CAST(GETDATE() AS NVARCHAR)
			, @ENTITY_USER_NAME
			, @USER_ID

		-- invoke the manual distribution process
		EXEC [dbo].[uspSCManualDistribution] 
			@LineItem = @MANUAL_DISTRIBUTION
			, @intTicketId= @CURRENT_TICKET_ID
			, @intUserId = @USER_ID
			, @intEntityId = @CURRENT_ENTITY_ID
			, @ysnSkipValidation = 1
			, @InventoryReceiptId = @InventoryReceiptId OUTPUT 
			, @intBillId = @intBillId OUTPUT
		
		-- log information
		INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
		SELECT @TICKET_APPLY_ID
			, 'Manual distribution completed - ' + CAST(GETDATE() AS NVARCHAR)
			, @ENTITY_USER_NAME
			, @USER_ID

		-- log information
		INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
		SELECT @TICKET_APPLY_ID
			, 'Closing the ticket and release the ticket from processing lock'
			, @ENTITY_USER_NAME
			, @USER_ID
		

		EXEC uspSCCheckTicketContractAfterManualDistribution 
			@intTicketId = @CURRENT_TICKET_ID
			, @intUserId = @USER_ID

		-- close the ticket	
		UPDATE tblSCTicket 
			SET strTicketStatus = 'C',
				intStorageScheduleTypeId = -3,
				strDistributionOption =	'SPT'
			WHERE intTicketId = @CURRENT_TICKET_ID

		-- release the ticket from processing
		EXEC uspSCCheckUpdateTicketProcessed 
			@intTicketId = @CURRENT_TICKET_ID
			, @intUserId = @USER_ID
			, @ysnStartProcess = 0

		
		-- onto the next tickets
		SELECT 
			@CURRENT_TICKET_ID  = MIN(ID) 
		FROM @TICKET_IDS 
		WHERE ID > @CURRENT_TICKET_ID
		

		-- log information
		INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
		SELECT @TICKET_APPLY_ID
			, 'Process completed for ticket ' + ISNULL(@CURRENT_TICKET_NUMBER, 'ticket id - ' + CAST(@CURRENT_TICKET_ID AS NVARCHAR)) 				
			, @ENTITY_USER_NAME
			, @USER_ID


		-- clear the vaiables
		SELECT @CURRENT_ENTITY_ID = NULL
			, @CURRENT_NET_UNITS = NULL
			, @CURRENT_TICKET_NUMBER = NULL


		
	END

	-- update the post value of the ticket apply
	UPDATE tblSCTicketApply
		SET ysnPosted = 1
			, dtmPosted = GETDATE()
			, intEntityUserId = @USER_ID
	WHERE intTicketApplyId = @TICKET_APPLY_ID
	
	-- log information
	INSERT INTO tblSCTicketApplyLog(intTicketApplyId, strLogCase1, strEntityName, intEntityId)
	SELECT @TICKET_APPLY_ID, 'Ticket apply process completed', @ENTITY_USER_NAME, @USER_ID
END