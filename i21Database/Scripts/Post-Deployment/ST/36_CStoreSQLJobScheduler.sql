GO-- ==================================================================================================================-- [START] - Validate Current SQL User if has rights to create SQL Maintenance Plan-- ==================================================================================================================	PRINT(N'Validate current SQL user before creating Job Scheduler named i21_CStore_Daily_Maintenance_Job.')	-- Check if current user has sysadmin/serveradmin role	-- Note: http://jira.irelyserver.com/browse/ST-1541	DECLARE @isUserHasRole BIT = CAST(0 AS BIT)	IF OBJECT_ID('tempdb..#TempSysAdmin') IS NOT NULL		BEGIN			DROP TABLE #TempSysAdmin		END			Create TABLE #TempSysAdmin	(		[ServerRole]	SYSNAME,		[MemberName]	SYSNAME,		[MemberSID]		VARBINARY(85)	)	INSERT INTO #TempSysAdmin EXEC sp_helpsrvrolemember 'sysadmin'	IF OBJECT_ID('tempdb..#TempServerAdmin') IS NOT NULL		BEGIN			DROP TABLE #TempServerAdmin		END			Create TABLE #TempServerAdmin	(		[ServerRole]	sysname,		[MemberName]	sysname,		[MemberSID]		varbinary(85)	)	INSERT INTO #TempServerAdmin exec sp_helpsrvrolemember 'serveradmin'	DECLARE @loginUser VARCHAR(250)	SET @loginUser = SYSTEM_USER	SELECT 		@isUserHasRole = 1 	FROM #TempSysAdmin 	WHERE MemberName = @loginUser	IF ISNULL(@isUserHasRole, 0) = 0	BEGIN		SELECT @isUserHasRole = 1 FROM #TempServerAdmin WHERE MemberName = @loginUser	END	-- ===================================================================================================	-- [START] - VALIDATE	-- ===================================================================================================	IF ISNULL(@isUserHasRole, 0) = 1		BEGIN			PRINT N'Current SQL user has rights to create maintenenace plan i21_CStore_Daily_Maintenance_Job'			-- Turn On Agent XPs --			EXEC sp_configure'SHOW ADVANCE',1			RECONFIGURE			EXEC sp_configure'AGENT XPs',1			RECONFIGURE						BEGIN TRANSACTION						-- Maintenance plan always used msdb			--USE msdb;  			DECLARE @ReturnCode				INT				= 0,					@strCStoreSchedulerName NVARCHAR(100)	= N'i21 CStore Scheduler Daily',					@strCStorePlanName		NVARCHAR(100)	= N'i21_CStore_Daily_Maintenance_Plan',					@strCStoreJobName		NVARCHAR(100)	= N'i21_CStore_Daily_Maintenance_Job',					@stri21Folder			NVARCHAR(150)   = N'ProgramData'					DECLARE @stri21LogPath			NVARCHAR(150)   = N'C:\\' + @stri21Folder + '\'			DECLARE @stri21OutputFilename	NVARCHAR(150)   = @stri21LogPath + 'i21_CStore_Log'			SELECT '@stri21LogPath', @stri21LogPath			SELECT '@stri21OutputFilename', @stri21OutputFilename			--Note: category_class			--1 = Job			--2 = Alert			--3 = Operator			-- Create JOB			IF NOT EXISTS(SELECT TOP 1 1 FROM msdb.dbo.syscategories WHERE name = @strCStoreSchedulerName AND category_class = 1)				BEGIN					EXEC @ReturnCode = msdb.dbo.sp_add_category 										@class		=	N'JOB', 										@type		=	N'LOCAL', 										@name		=	@strCStoreSchedulerName					IF (@@ERROR <> 0 OR @ReturnCode <> 0) 						BEGIN							PRINT @@ERROR							GOTO QuitWithRollback						END					END				-- Check if maintenance is currently existing, else create it				DECLARE @planId BINARY(16),						@currentDatabaseName AS NVARCHAR(100) = DB_NAME()				SELECT @planId = plan_id FROM msdb.dbo.sysdbmaintplans WHERE plan_name = @strCStorePlanName				IF @planId IS NULL					BEGIN						EXEC @ReturnCode = msdb.dbo.sp_add_maintenance_plan 											@plan_name	= @strCStorePlanName ,   											@plan_id	= @planId OUTPUT 						IF (@@ERROR <> 0 OR @ReturnCode <> 0) 							BEGIN								PRINT @@ERROR								GOTO QuitWithRollback							END						EXEC @ReturnCode = msdb.dbo.sp_add_maintenance_plan_db 								@planId, 								@currentDatabaseName						IF (@@ERROR <> 0 OR @ReturnCode <> 0) 							BEGIN								PRINT @@ERROR								GOTO QuitWithRollback							END						END			-- Add job for this database --			DECLARE @jobId BINARY(16)			DECLARE @serverName varchar(250)			SELECT @jobId = job_id FROM msdb.dbo.sysjobs WHERE name = @strCStoreJobName			SELECT @serverName = Convert(varchar(250), SERVERPROPERTY('ServerName'))				IF @jobId IS NULL					BEGIN						--  Adds a new job, executed by the SQL Server Agent service, called "i21_ReIndex_Maintenance_Schedule".  						EXEC @ReturnCode = msdb.dbo.sp_add_job  						   @job_name				=	@strCStoreJobName,						   @enabled					=	1,						   @notify_level_eventlog	=	2, 						   @description				=	N'CStore Daily Maintenance Scheduler',						   @category_name			=	@strCStoreSchedulerName, 						   @job_id = @jobId OUTPUT						IF (@@ERROR <> 0 OR @ReturnCode <> 0) 							BEGIN								PRINT @@ERROR								GOTO QuitWithRollback							END						EXEC @ReturnCode = msdb.dbo.sp_add_jobserver 							 @job_id = @jobId,							 @server_name = @serverName						IF (@@ERROR <> 0 OR @ReturnCode <> 0) 							BEGIN								PRINT @@ERROR								GOTO QuitWithRollback							END						-- Add this job to our maintenance plan						EXEC @ReturnCode = msdb.dbo.sp_add_maintenance_plan_job @planId, @jobId						IF (@@ERROR <> 0 OR @ReturnCode <> 0) 							BEGIN								PRINT @@ERROR								GOTO QuitWithRollback							END					END				-- ADD JOB STEP AND JOB SCHEDULE FOR i21 DATABASES --				DECLARE @stepName nvarchar(max)				DECLARE @stepNameSchedule nvarchar(max)				DECLARE @stepCommand nvarchar(max)				DECLARE @currentDate nvarchar(max)				DECLARE @stepId INT				DECLARE @maxStepId INT				SET @maxStepId = 0;				SET @currentDate = convert(NVARCHAR, GETDATE(), 112)				SET @stepName = N'Invoke CStore Daily Maintenance Scheduler in ' + Convert(varchar(100), @currentDatabaseName)				SET @stepNameSchedule = N'i21_CStore_Daily_Scheduler in' + Convert(varchar(100), @currentDatabaseName)				SET @stepCommand = N'				GO				BEGIN TRY					USE [' + Convert(varchar(50), @currentDatabaseName) + '] 					EXEC [uspSTCStoreSQLSchedulerDaily]				END TRY				BEGIN CATCH					SELECT 						ERROR_NUMBER() AS ErrorNumber,						ERROR_SEVERITY() AS ErrorSeverity,						ERROR_STATE() as ErrorState,						ERROR_PROCEDURE() as ErrorProcedure,						ERROR_LINE() as ErrorLine,						ERROR_MESSAGE() as ErrorMessage;				END CATCH				GO'				SELECT @maxStepId = MAX(step_id) FROM msdb.dbo.sysjobsteps WHERE job_id = @jobId				SELECT @stepId = step_id FROM msdb.dbo.sysjobsteps WHERE step_name = @stepName				IF ISNULL(@stepId, 0) = 0					BEGIN						SET @maxStepId = ISNULL(@maxStepId, 0) + 1						-- Adds a job step for invoking the stored procedure for reindex in this database						EXEC @ReturnCode = msdb.dbo.sp_add_jobstep  							@job_id = @jobId,							@step_id = @maxStepId,							@step_name = @stepName,							@subsystem = N'TSQL',   							--@command = @stepCommand,							@os_run_priority=0,							@output_file_name= @stri21OutputFilename, 							@flags=2														--Append to output file						IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback						EXEC @ReturnCode = msdb.dbo.sp_update_jobstep							 @job_id = @jobId, 							 @step_id = @maxStepId,							 @command = @stepCommand						IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback						EXEC @ReturnCode = msdb.dbo.sp_update_job 							 @job_id = @jobId, 							 @start_step_id = 1						IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback							EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule 							--@job_id = @jobId, 							@job_name = @strCStoreJobName,   							@name = @stepNameSchedule,							@enabled = 1, 							--@freq_type = 16,					-- Monthly							@freq_type = 4,						-- Daily							@freq_interval = 1,					-- Once / Sunday							@freq_subday_type = 1,				-- At the specified time							@freq_relative_interval = 0, 							@freq_recurrence_factor = 1, 							@active_start_date= @currentDate, 							@active_end_date = 99991231, 							@active_start_time = 10000,			-- 1AM							--@active_start_time = 175400,		-- 1AM							@active_end_time = 235959						IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback						-- Update lower step success action to "Go to next step"						IF @maxStepId > 1						BEGIN							UPDATE msdb.dbo.sysjobsteps set on_success_action = 3							WHERE job_id = @jobId and step_id <> @maxStepId						END						-- Create directory for log --						DECLARE @LogPath nvarchar(500)						DECLARE @DirTree TABLE (subdirectory nvarchar(255), depth INT)						SET @LogPath = @stri21LogPath						INSERT INTO @DirTree(subdirectory, depth)						EXEC master.sys.xp_dirtree @LogPath						IF NOT EXISTS (SELECT 1 FROM @DirTree WHERE subdirectory = @stri21Folder)						EXEC master.dbo.xp_create_subdir @LogPath						DELETE FROM @DirTree					END				ELSE					BEGIN						EXEC @ReturnCode = msdb.dbo.sp_update_jobstep								 @job_id = @jobId, 								 @step_id = @stepId,								 @command = @stepCommand							IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback					END								PRINT N'SQL Maintenance plan job i21_CStore_Daily_Maintenance_Job was created successfully.'				COMMIT TRANSACTION				GOTO EndSave		END	ELSE 		BEGIN			PRINT N'CURRENT SQL USER IS NOT ALLOWED TO CREATE MAINTENANCE PLAN. PLEASE CONTACT YOUR DATABASE ADMINISTRATOR FOR PERMISSION.'			GOTO QuitWithRollback		END	-- ===================================================================================================	-- [END] - VALIDATE	-- ===================================================================================================-- ==================================================================================================================-- [END] - Validate Current SQL User if has rights to create SQL Maintenance Plan-- ==================================================================================================================QuitWithRollback:		IF (@@TRANCOUNT > 0)			BEGIN				ROLLBACK TRANSACTION				PRINT 'Will ROLLBACK changes'			END			EndSave:	-- DO NOT Turn Off Agent XPs --	--EXEC sp_configure'AGENT XPs',0	--RECONFIGURE	--EXEC sp_configure'SHOW ADVANCE',0	--RECONFIGUREGO