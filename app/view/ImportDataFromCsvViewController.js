/*
 * File: apps/view/ImportDataFromCsvViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
Ext.define('Inventory.view.ImportDataFromCsvViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.icimportdatafromcsv',
    formParams: null,

    onBtnCloseClick: function(button, e, eOpts) {
        "use strict";
        var win = button.up('window');
        win.close();
    },

    config: {
        binding: {
            chbOverwrite: {
                value: '{ysnOverwrite}'
            },
            chbAllowDuplicates: {
                value: '{ysnAllowDuplicates}',
                disabled: '{ysnOverwrite}'
            },
            chbVerbose: '{ysnVerbose}'
        }
    },

    show: function(cfg) {
        var me = this;
        var win = me.getView();
        me.formParams = cfg.param;
        me.getView().setTitle(cfg.param.title + ' from CSV File');
        
        win.show();
        var context = me.setupContext();
        context.data.load();
    },
    
    setupContext: function(options) {
        var me = this,
            win = me.getView();
        
        win.context = Ext.create('iRely.Engine', {
            window: win,
            store: Ext.create('Inventory.store.CompanyPreference'),
            binding: me.config.binding
        });

        return win.context;
    },

    onDownloadTemplate: function(button, e, eOpts) {
        "use strict";
        var me = this;
        var win = button.up('window');
        var params = me.formParams;

        ic.icconversion.downloadTemplate(params.template, params.title);
    },

    onImportButtonClick: function(button, e, eOpts) {
        "use strict";
        var me = this;
        var win = button.up('window');
        var params = me.formParams;

        var form = button.up('form').getForm();
        var txtBrowseFile = win.down("#txtBrowseFile");
        var fileInput = txtBrowseFile.extractFileInput();
        var chbOverwrite = win.down("#chbOverwrite");
        var chbAllowDuplicates = win.down("#chbAllowDuplicates");
        var chbVerbose = win.down("#chbVerbose");
        
        if(fileInput && fileInput.files.length > 0) {
            if (txtBrowseFile.isValid()) {
                if (form.isValid()) {
                    var file = fileInput.files[0];
                    me.ajaxRequest({
                        url: './inventory/api/importdata/import',
                        file: file,
                        importType: params.type,
                        allowOverwrite: chbOverwrite.checked,
                        allowDuplicates: chbAllowDuplicates.checked,
                        verboseLogging: chbVerbose.checked,
                        lineOfBusiness: params.lineOfBusiness,
                        params: params.params,
                        method: params.method,
                        title: params.title,
                        callback: function(records, success, options) {
                            alert(success);
                        }
                    }, win);
                }
            } else {
                i21.functions.showCustomDialog('error', 'ok', 'The file is invalid!.');
            }
        } else {
            i21.functions.showCustomDialog('error', 'ok', 'Please select a file to import!.');
        }
    },

    onTxtBrowseFileChange: function(field,value){
        "use strict";
        var newValue = value.replace(/C:\\fakepath\\/g, '');
        field.setRawValue(newValue);
    },

    init: function(application) {
        "use strict";
        this.control({
            "icimportdatafromcsv #btnClose": {
                click: this.onBtnCloseClick
            },
            "icimportdatafromcsv #btnImport": {
                click: this.onImportButtonClick
            },
            "icimportdatafromcsv #txtBrowseFile": {
                change: this.onTxtBrowseFileChange
            },
            "icimportdatafromcsv #btnDownload": {
                click: this.onDownloadTemplate
            }
        });
    },

    ajaxRequest: function (p, win) {
        jQuery.ajax({
            url: p.url,
            method: p.method,
            headers: {
               'Content-Type': 'multipart/form-data',
               'Authorization': iRely.Configuration.Security.AuthToken,
               'X-File-Name': p.file.name,
               'X-File-Size': p.file.size,
               'X-File-Type': p.file.type,
               'X-Import-Type': p.importType,
               'X-Import-Allow-Overwrite': p.allowOverwrite ? "true" : "false",
               'X-Import-Allow-Duplicates': p.allowDuplicates ? "true" : "false",
               'X-Import-Enable-Verbose-Logging': p.verboseLogging ? "true" : "false",
               'X-Import-Allow-LineOfBusiness': p.lineOfBusiness
            },
            data: p.file,
            processData: false,
            beforeSend: function(jqXHR, settings) {
                iRely.Msg.showWait('Importing in progress...');
            },

            success: function(data, status, jqXHR) {
                var me = this;
                iRely.Msg.close();
                var json = JSON.parse(jqXHR.responseText);
                var type = json.Type === "Warning" ? 'warning' : (json.Type === "Error" ? 'error' : 'info');
                var msg = json.Description ? json.Description : json.Message + " " + json.ExceptionMessage;
                i21.functions.showCustomDialog(type, 'ok', msg, function() {
                    //win.close();

                    if (json.HasMessages) {
                        if(json.LogId && json.LogId != 0) {
                            iRely.Functions.openScreen('Inventory.view.ImportLog', {
                                filters: { column: 'intImportLogId', value: json.LogId },
                                username: json.Username,
                                action: 'view',
                                viewConfig: { modal: true }
                            });
                        } else {
                            iRely.Functions.openScreen('Inventory.view.ImportLogMessageBox', {
                                data: json,
                                title: p.title
                            });
                        }
                    }
                    
                    if(!iRely.Functions.isEmpty(json.ExtraScreenToOpen)) {
                        iRely.Functions.openScreen(ExtraScreenToOpen, json.Description);
                    }
                });
            },
            error: function(jqXHR, status, error) {
                iRely.Msg.close();
                var json = JSON.parse(jqXHR.responseText);
                var msg = json.Description ? json.Description : json.Message + " " + json.ExceptionMessage;
                i21.functions.showCustomDialog('error', 'ok', 'Import failed! ' + msg,
                    function() {
                        //win.close();

                        if (json.HasMessages) {
                            if(json.LogId && json.LogId != 0) {
                                iRely.Functions.openScreen('Inventory.view.ImportLog', {
                                    filters: { column: 'intImportLogId', value: json.LogId },
                                    username: json.Username,
                                    action: 'view',
                                    viewConfig: { modal: true }
                                });
                            } else {
                                iRely.Functions.openScreen('Inventory.view.ImportLogMessageBox', {
                                    data: json,
                                    title: p.title
                                });
                            }
                        }
                    }
                );
            }
        });
    }
});