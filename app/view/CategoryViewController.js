/*
 * File: app/view/CategoryViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Inventory.view.CategoryViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.category',

    config: {
        searchConfig: {
            title: 'Search Category',
            type: 'Inventory.Category',
            api: {
                read: '../Inventory/api/Category/SearchCategories'
            },
            columns: [
                {dataIndex: 'intCategoryId', text: "Category Id", flex: 1, defaultSort: true, dataType: 'numeric', key: true, hidden: true},
                {dataIndex: 'strCategoryCode', text: 'Category Code', flex: 1, dataType: 'string'},
                {dataIndex: 'strDescription', text: 'Description', flex: 1, dataType: 'string'}
            ]
        },
        binding: {
            txtCategoryCode: '{current.strCategoryCode}',
            txtDescription: '{current.strDescription}',
            cboLineOfBusiness: {
                value: '{current.strLineOfBusiness}',
                store: '{linesOfBusiness}'
            },
            cboCatalogGroup: '{current.intCatalogGroupId}',
            cboCostingMethod: {
                value: '{current.intCostingMethod}',
                store: '{costingMethods}'
            },
            cboInventoryTracking: {
                value: '{current.strInventoryTracking}',
                store: '{inventoryTrackings}'
            },
            txtStandardQty: '{current.dblStandardQty}',
            cboStandardUom: {
                value: '{current.intUOMId}',
                store: '{unitMeasures}'
            },
            txtGlDivisionNumber: '{current.strGLDivisionNumber}',
            chkSalesAnalysisByTon: '{current.ysnSalesAnalysisByTon}',
            cboMaterialFee: {
                value: '{current.strMaterialFee}',
                store: '{materialFees}'
            },
            cboMaterialItem: {
                value: '{current.intMaterialItemId}',
                store: '{materialItem}'
            },
            chkAutoCalculateFreight: '{current.ysnAutoCalculateFreight}',
            cboFreightItem: {
                value: '{current.intFreightItemId}',
                store: '{freightItem}'
            },

            grdLocation: {
                colLocationId: 'strLocationName',
                colLocationCashRegisterDept: 'intRegisterDepartmentId',
                colLocationTargetGrossProfit: 'dblTargetGrossProfit',
                colLocationTargetInventoryCost: 'dblTargetInventoryCost',
                colLocationCostInventoryBOM: 'dblCostInventoryBOM'
            },

            grdGlAccounts: {
                colAccountDescription: {
                    dataIndex: 'strAccountDescription',
                    editor: {
                        store: '{accountDescriptions}'
                    }
                },
                colAccountId: {
                    dataIndex: 'strAccountId',
                    editor: {
                        store: '{glAccount}'
                    }
                }
            },

            grdVendorCategoryXref: {
                colVendorLocation: {
                    dataIndex: 'strLocationName',
                    editor: {
                        store: '{location}'
                    }
                },
                colVendorId: {
                    dataIndex: 'strVendorId',
                    editor: {
                        store: '{vendor}'
                    }
                },
                colVendorDepartment: '',
                colVendorAddOrderUPC: '',
                colVendorUpdateExisting: '',
                colVendorAddNew: '',
                colVendorUpdatePrice: '',
                colVendorFamily: '',
                colVendorSellClass: '',
                colVendorOrderClass: '',
                colVendorComments: ''
            },

            txtERPItemClass: '{current.strERPItemClass}',
            txtLifeTime: '{current.dblLifeTime}',
            txtBOMItemShrinkage: '{current.dblBOMItemShrinkage}',
            txtBOMItemUpperTolerance: '{current.dblBOMItemUpperTolerance}',
            txtBOMItemLowerTolerance: '{current.dblBOMItemLowerTolerance}',
            chkScaled: '{current.ysnScaled}',
            chkOutputItemMandatory: '{current.ysnOutputItemMandatory}',
            txtConsumptionMethod: '{current.strConsumptionMethod}',
            txtBOMItemType: '{current.strBOMItemType}',
            txtShortName: '{current.strShortName}',
            imgReceipt: '{current.imgReceiptImage}',
            imgWIP: '{current.imgWIPImage}',
            imgFG: '{current.imgFGImage}',
            imgShip: '{current.imgShipImage}',
            txtLaborCost: '{current.dblLaborCost}',
            txtOverHead: '{current.dblOverHead}',
            txtPercentage: '{current.dblPercentage}',
            txtCostDistributionMethod: '{current.strCostDistributionMethod}',
            chkSellable: '{current.ysnSellable}',
            chkYieldAdjustment: '{current.ysnYieldAdjustment}'
        }
    },

    setupContext : function(options){
        var me = this,
            win = options.window,
            store = Ext.create('Inventory.store.Category', { pageSize: 1 });

        win.context = Ext.create('iRely.mvvm.Engine', {
            window : win,
            store  : store,
            createRecord : me.createRecord,
            binding: me.config.binding,
            details: [
                {
                    key: 'tblICCategoryAccounts',
                    component: Ext.create('iRely.mvvm.grid.Manager', {
                        grid: win.down('#grdGlAccounts'),
                        deleteButton : win.down('#btnDeleteGlAccounts')
                    })
                },
                {
                    key: 'tblICCategoryLocations',
                    component: Ext.create('iRely.mvvm.grid.Manager', {
                        grid: win.down('#grdLocation'),
                        deleteButton : win.down('#btnDeleteLocation'),
                        position: 'none'
                    })
                },
                {
                    key: 'tblICCategoryVendors',
                    component: Ext.create('iRely.mvvm.grid.Manager', {
                        grid: win.down('#grdVendorCategoryXref'),
                        deleteButton : win.down('#btnDeleteVendorCategoryXref')
                    })
                }
            ]
        });
        return win.context;
    },

    show : function(config) {
        "use strict";

        var me = this,
            win = this.getView();

        if (config) {
            win.show();

            var context = me.setupContext( {window : win} );

            if (config.action === 'new') {
                context.data.addRecord();
            } else {
                if (config.id) {
                    config.filters = [{
                        column: 'intCategoryId',
                        value: config.id
                    }];
                }
                context.data.load({
                    filters: config.filters
                });
            }
        }
    },

    onAccountSelect: function(combo, records, eOpts) {
        if (records.length <= 0)
            return;

        var grid = combo.up('grid');
        var plugin = grid.getPlugin('cepAccount');
        var current = plugin.getActiveRecord();

        if (combo.column.itemId === 'colAccountId')
        {
            current.set('intAccountId', records[0].get('intAccountId'));
        }
    },

    onbtnAddLocationClick: function(button, e, eOpts) {
        var win = button.up('window');
        var me = win.controller;
        me.openCategoryLocationScreen('new', win);
    },

    onbtnEditLocationClick: function(button, e, eOpts) {
        var win = button.up('window');
        var me = win.controller;
        me.openCategoryLocationScreen('edit', win);
    },

    openCategoryLocationScreen: function (action, window) {
        var win = window;
        var me = win.controller;
        var screenName = 'Inventory.view.CategoryLocation';

        Ext.require([
                screenName,
                screenName + 'ViewModel',
                screenName + 'ViewController',
        ], function() {
            var screen = screenName.substring(screenName.indexOf('view.') + 5, screenName.length);
            var view = Ext.create(screenName, { controller: screen.toLowerCase(), viewModel : { type: screen.toLowerCase() } });
            view.on('destroy', me.onDestroyCategoryLocationScreen, me, { window: win });

            var controller = view.getController();
            var current = win.getViewModel().data.current;
            controller.show({ id: current.get('intCategoryId'), action: action });
        });
    },

    onDestroyCategoryLocationScreen: function(win, eOpts) {
        var me = eOpts.window.getController();
        var win = eOpts.window;
        var grdLocation = win.down('#grdLocation');

        grdLocation.store.reload();
    },

    init: function(application) {
        this.control({
            "#cboAccountId": {
                select: this.onAccountSelect
            },
            "#btnAddLocation": {
                click: this.onbtnAddLocationClick
            },
            "#btnEditLocation": {
                click: this.onbtnEditLocationClick
            }
        });
    }
});
