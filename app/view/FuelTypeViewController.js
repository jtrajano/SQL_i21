/*
 * File: app/view/FuelTypeViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Inventory.view.FuelTypeViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.icfueltype',

    config: {
        searchConfig: {
            title:  'Search Fuel Type',
            type: 'Inventory.FuelType',
            api: {
                read: '../Inventory/api/FuelType/Search'
            },
            columns: [
                {dataIndex: 'intFuelTypeId',text: "Fuel Type", flex: 1, defaultSort:true, dataType: 'numeric', key: true, hidden: true},
                {dataIndex: 'strRinFuelTypeCodeId', text: 'Fuel Type', flex: 1,  dataType: 'string'},
                {dataIndex: 'strRinFeedStockId', text: 'Feed Stock', flex: 1,  dataType: 'string'},
                {dataIndex: 'strRinFuelId', text: 'Fuel Code', flex: 1,  dataType: 'string'},
                {dataIndex: 'strRinProcessId', text: 'Process Code', flex: 1,  dataType: 'string'}
            ],
            buttons: [
                {
                    text: 'Fuel Category',
                    itemId: 'btnFuelCategory',
                    clickHandler: 'onFuelCategoryDrilldown',
                    width: 100
                },
                {
                    text: 'Feed Stock',
                    itemId: 'btnFeedStock',
                    clickHandler: 'onFeedStockDrilldown',
                    width: 100
                },
                {
                    text: 'Fuel Code',
                    itemId: 'btnFuelCode',
                    clickHandler: 'onFuelCodeDrilldown',
                    width: 100
                },
                {
                    text: 'Production Process',
                    itemId: 'btnProductionProcess',
                    clickHandler: 'onProductionProcessDrilldown',
                    width: 100
                },
                {
                    text: 'Feed Stock UOM',
                    itemId: 'btnFeedStockUOM',
                    clickHandler: 'onFeedStockUomDrilldown',
                    width: 100
                }
            ]
        },
        binding: {
            txtBatchNo: '{current.intBatchNumber}',
            txtEndingRinGallonsForBatch: '{current.intEndingRinGallons}',
            txtEquivalenceValue: '{current.strEquivalenceValue}',
            txtFeedStockFactor: '{current.dblFeedStockFactor}',
            chkRenewableBiomass: '{current.ysnRenewableBiomass}',
            txtPercentOfDenaturant: '{current.dblPercentDenaturant}',
            chkDeductDenaturantFromRin: '{current.ysnDeductDenaturant}',
            cboFuelCategory: {
                value: '{current.intRinFuelCategoryId}',
                store: '{fuelCategory}'
            },
            cboFeedStock: {
                value: '{current.intRinFeedStockId}',
                store: '{feedStock}'
            },
            cboFuelCode: {
                value: '{current.intRinFuelId}',
                store: '{fuelCode}'
            },
            cboProductionProcess: {
                value: '{current.intRinProcessId}',
                store: '{productionProcess}'
            },
            cboFeedStockUom: {
                value: '{current.intRinFeedStockUOMId}',
                store: '{feedStockUom}'
            }
        }
    },

    setupContext : function(options){
        "use strict";
        var me = this,
            win = options.window,
            store = Ext.create('Inventory.store.FuelType', { pageSize: 1 });

        win.context = Ext.create('iRely.mvvm.Engine', {
            window : win,
            store  : store,
            createRecord : me.createRecord,
            binding: me.config.binding
        });

        return win.context;
    },

    show : function(config) {
        "use strict";

        var me = this,
            win = this.getView();

        if (config) {
            win.show();

            var context = me.setupContext( {window : win} );

            if (config.action === 'new') {
                context.data.addRecord();
            } else {
                if (config.id) {
                    config.filters = [{
                        column: 'intFuelTypeId',
                        value: config.id
                    }];
                }
                context.data.load({
                    filters: config.filters
                });
            }
        }
    },

    oncboFuelCategorySelect: function(combo, records, eOpts) {
        if (records.length <= 0)
            return;

        var win = combo.up('window')
        var current = win.getViewModel().data.current;

        if (current)
            current.set('strEquivalenceValue', records[0].get('strEquivalenceValue'));
    },

    onFuelCategoryDrilldown: function() {
        iRely.Functions.openScreen('Inventory.view.FuelCategory', {viewConfig: { modal: true }});
    },

    onFeedStockDrilldown: function() {
        iRely.Functions.openScreen('Inventory.view.FeedStockCode', {viewConfig: { modal: true }});
    },

    onFuelCodeDrilldown: function() {
        iRely.Functions.openScreen('Inventory.view.FuelCode', {viewConfig: { modal: true }});
    },

    onProductionProcessDrilldown: function() {
        iRely.Functions.openScreen('Inventory.view.ProcessCode', {viewConfig: { modal: true }});
    },

    onFeedStockUomDrilldown: function() {
        iRely.Functions.openScreen('Inventory.view.FeedStockUom', {viewConfig: { modal: true }});
    },

    init: function(application) {
        this.control({
            "#cboFeedStock": {
                drilldown: this.onFeedStockDrilldown
            },
            "#cboFuelCode": {
                drilldown: this.onFuelCodeDrilldown
            },
            "#cboProductionProcess": {
                drilldown: this.onProductionProcessDrilldown
            },
            "#cboFeedStockUom": {
                drilldown: this.onFeedStockUomDrilldown
            },
            "#cboFuelCategory": {
                select: this.oncboFuelCategorySelect,
                drilldown: this.onFuelCategoryDrilldown
            }
        });
    }
});
