/*
 * File: app/view/PackTypeViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Inventory.view.PackTypeViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.icpacktype',

    config: {
        searchConfig: {
            title:  'Search Pack Types',
            type: 'Inventory.PackType',
            api: {
                read: '../Inventory/api/PackType/SearchPackTypes'
            },
            columns: [
                {dataIndex: 'intPackTypeId',text: "Pack Type Id", flex: 1, defaultSort:true, dataType: 'numeric', key: true, hidden: true},
                {dataIndex: 'strPackName', text: 'Pack Type Name', flex: 2,  dataType: 'string'},
                {dataIndex: 'strDescription', text: 'Description', flex: 1,  dataType: 'string'}
            ]
        },
        binding: {
            bind: {
                title: 'Pack Type - {current.strPackName}'
            },
            txtPackTypeName: '{current.strPackName}',
            txtDescription: '{current.strDescription}',

            grdPackType: {
                colSourceUOM: {
                    dataIndex: 'strSourceUnitMeasure',
                    editor: {
                        store: '{sourceUnitMeasure}'
                    }
                },
                colTargetUOM: {
                    dataIndex: 'strTargetUnitMeasure',
                    editor: {
                        store: '{targetUnitMeasure}'
                    }
                },
                colConversionFactor: 'dblConversionFactor'
            }
        }
    },

    setupContext : function(options){
        "use strict";
        var me = this,
            win = options.window,
            store = Ext.create('Inventory.store.PackType', { pageSize: 1 });

        var grdPackType = win.down('#grdPackType');

        win.context = Ext.create('iRely.mvvm.Engine', {
            binding: me.config.binding,
            window : win,
            store  : store,
            details: [
                {
                    key: 'tblICPackTypeDetails',
                    component: Ext.create('iRely.mvvm.grid.Manager', {
                        grid: grdPackType,
                        deleteButton : grdPackType.down('#btnDeletePackType')
                    })
                }
            ]
        });

//        var colSourceUOM = grdPackType.columns[0];
//        var cboSourceUOM = colSourceUOM.getEditor();
//        cboSourceUOM.on('select', me.onUOMSelect);
//
//        var colTargetUOM = grdPackType.columns[1];
//        var cboTargetUOM = colTargetUOM.getEditor();
//        cboTargetUOM.on('select', me.onUOMSelect);
        return win.context;
    },

    show : function(config) {
        "use strict";

        var me = this,
            win = this.getView();

        if (config) {
            win.show();

            var context = me.setupContext( {window : win} );

            if (config.action === 'new') {
                context.data.addRecord();
            } else {
                if (config.id) {
                    config.filters = [{
                        column: 'intPackTypeId',
                        value: config.id
                    }];
                }
                context.data.load({
                    filters: config.filters
                });
            }
        }
    },

    onUOMSelect: function(combo, records, eOpts) {
        if (records.length <= 0)
            return;

        var grid = combo.up('grid');
        var plugin = grid.getPlugin('cepPackType');
        var current = plugin.getActiveRecord();

        if (combo.column.itemId === 'colSourceUOM')
        {
            current.set('intSourceUnitMeasureId', records[0].get('intUnitMeasureId'));
        }
        else if (combo.column.itemId === 'colTargetUOM')
        {
            current.set('intTargetUnitMeasureId', records[0].get('intUnitMeasureId'));
        }
    },

    init: function(application) {
        this.control({
            "#cboSourceUOM": {
                select: this.onUOMSelect
            },
            "#cboTargetUOM": {
                select: this.onUOMSelect
            }
        });
    }
});
