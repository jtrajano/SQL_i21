/*
 * File: app/view/InventoryTagViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Inventory.view.InventoryTagViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.icinventorytag',

    config: {
        searchConfig: {
            title:  'Search Inventory Tag',
            type: 'Inventory.Tag',
            api: {
                read: './Inventory/api/Tag/Search'
            },
            columns: [
                {dataIndex: 'intTagId',text: "Tag Id", flex: 1, defaultSort:true, dataType: 'numeric', key: true, hidden: true},
                {dataIndex: 'strType', text: 'Type', flex: 1,  dataType: 'string'},
                {dataIndex: 'strTagNumber', text: 'Tag Number', flex: 1,  dataType: 'string'},
                {dataIndex: 'strDescription', text: 'Description', flex: 1,  dataType: 'string'},
                {dataIndex: 'ysnHazMat',text: 'HAZMAT', flex: 1,  dataType: 'boolean', xtype: 'checkcolumn'}
            ]
        },
        binding: {
            txtTagNumber: '{current.strTagNumber}',
            txtDescription: '{current.strDescription}',
            chkHAZMATMessage: '{ysnHazMat}',
            cboType: {
                value: '{current.strType}',
                store: '{types}'
            },
            txtMessage: '{current.strMessage}'
        }
    },

    setupContext : function(options){
        "use strict";
        var me = this,
            win = me.getView(),
            store = Ext.create('Inventory.store.InventoryTag', { pageSize: 1 });

        win.context = Ext.create('iRely.Engine', {
            window : win,
            store  : store,
            createRecord : me.createRecord,
            binding: me.config.binding
        });

        return win.context;
    },

    show : function(config) {
        "use strict";

        var me = this,
            win = this.getView();

        if (config) {
            win.show();

            var context = win.context ? win.context.initialize() : me.setupContext();

            if (config.action === 'new') {
                context.data.addRecord();
            } else {
                if (config.id) {
                    config.filters = [{
                        column: 'intTagId',
                        value: config.id
                    }];
                }
                context.data.load({
                    filters: config.filters
                });
            }
        }
    }
});
