/*
 * File: app/view/CatalogViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Inventory.view.CatalogViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.iccatalog',

    show : function(config) {
        "use strict";

        var me = this,
            win = this.getView();

        if (config) {
            win.show();

            me.catalogStore = Ext.create('Inventory.store.Catalog');

            var proxy  = me.catalogStore.getProxy(),
                writer = Ext.create('iRely.writer.JsonBatch', {
                    allowSingle: false,
                    nameProperty: 'mapping'
                });

            proxy.setWriter(writer);
            proxy.batchActions = true;

            var callback = function(store, node, records, successful) {
                me.catalogStore.un('load', callback);

                var rootNode = me.catalogStore.getRootNode();
                rootNode.on('append', me.onTreeNodeAppend);
            };

            me.catalogStore.on('load', callback);
            me.catalogStore.load();

            var grdCatalog = win.down('#grdCatalog');
            grdCatalog.store = null;
            grdCatalog.bindStore(me.catalogStore);
        }
    },

    onTreeNodeAppend : function(nodeinterface, node, index) {
        if (node) {
            node.data.leaf = node.data.ysnLeaf;
            node.iconCls = 'small-folder';
        }
    },

    onbtnSaveClick: function(button, e, eOpts) {
        var win = button.up('window');
        var controller = win.getController();
        controller.catalogStore.sync();
    },

    onbtnUndoClick: function(button, e, eOpts) {
        var win = button.up('window');
        var form = win.down('form');
        form.reset();
    },

    onbtnCloseClick: function(button, e, eOpts) {
        var win = button.up('window');
        win.close();
    },

    onbtnAddCatalogClick: function(button, e, eOpts) {
        var win = button.up('window');
        var treePanel = win.down('#grdCatalog');
        var record = treePanel.getSelectionModel().getSelection();

        if (record.length === 0) {
            this.openEditCatalogScreen('addroot', null, win);
        }
        else {
            this.openEditCatalogScreen('add', null, win);
        }
    },

    onbtnEditCatalogClick: function(button, e, eOpts) {
        var win = button.up('window');
        var treePanel = win.down('#grdCatalog');
        var record = treePanel.getSelectionModel().getSelection();

        if (record.length === 0) {
            iRely.functions.showErrorDialog('Please select a Catalog to edit.');
        }
        else {
            this.openEditCatalogScreen('edit', record[0], win);
        }
    },

    onbtnDeleteCatalogClick: function(button, e, eOpts) {
        var win = button.up('window');
        var treePanel = win.down('#grdCatalog');
        var record = treePanel.getSelectionModel().getSelection();


        if (record.length > 0){
            var currentNode = record[0];
            var action = function (e) {
                if (e == 'yes') {
                    var parentNode = currentNode.parentNode;
                    parentNode.removeChild(currentNode);
                    if (parentNode.childNodes === null || parentNode.childNodes.length <= 0)
                    {
                        parentNode.collapse();
                        parentNode.set('ysnLeaf', true);
                        parentNode.set('leaf', true);
                    }
                }
            };
            i21.functions.showDeleteDialog(button, action, 'Are you sure you want to delete this record?');
        }
    },

    openEditCatalogScreen: function(action, record, win) {
        var me = win.controller;
        var screenName = 'Inventory.view.EditCatalog';

        Ext.require([
            screenName,
                screenName + 'ViewModel',
                screenName + 'ViewController'
        ], function() {
            var screen = screenName.substring(screenName.indexOf('view.') + 5, screenName.length);
            var view = Ext.create(screenName, { controller: screen.toLowerCase(), viewModel : { type: screen.toLowerCase() } });
            view.on('beforedestroy', me.onDestroyCatalogScreen, view, { window: win, currentRecord: record, action: action});

            var controller = view.getController();
            switch (action) {
                case 'add':
                    controller.show({ action: action, record: record });
                    break;
                case 'addroot':
                    controller.show({ action: action });
                    break;
                case 'edit':
                    controller.show({ action: action, record: record });
                    break;
            }
        });
    },

    onDestroyCatalogScreen: function(win, eOpts) {
        var editController = this.getController();
        var editCatalog = editController.catalog;

        if (!editCatalog) return;

        var win = eOpts.window;
        var grdCatalog = win.down('#grdCatalog');
        var action = eOpts.action;
        var selectedNodes = grdCatalog.getSelectionModel().getSelection();
        var currentNode;

        if (selectedNodes.length > 0) {
            currentNode = selectedNodes[0];
        }
        switch (action) {
            case 'add':
                if (currentNode) {
                    var appendNode = function () {
                        var detailStore = currentNode['children']();
                        var newRecord = Ext.create('Inventory.model.Catalog', editCatalog);
                        detailStore.add(newRecord);
                        newRecord.set('intParentCatalogId', currentNode.data.intCatalogId);
                        newRecord.set('ysnLeaf', true);
                        newRecord.set('leaf', true);
                        newRecord.set('iconCls', 'small-folder');
                        editCatalog.intParentCatalogId = currentNode.data.intCatalogId;
                        currentNode.appendChild(newRecord);
                    };

                    if (currentNode.get('ysnLeaf') === false) {
                        currentNode.expand(false, function () {
                            appendNode();
                        });
                    }
                    else {
                        currentNode.set('ysnLeaf', false);
                        appendNode();
                        currentNode.expand();
                    }
                }
                break;
            case 'addroot':
                currentNode = grdCatalog.getRootNode();
                editCatalog.intParentCatalogId = 0;
                editCatalog.ysnLeaf = true;
                editCatalog.leaf = true;
                editCatalog.iconCls = 'small-folder';
                currentNode.appendChild(editCatalog);
                break;
            case 'edit':
                if (editCatalog)
                {
                    currentNode.set('strCatalogName', editCatalog.strCatalogName);
                    currentNode.set('strDescription', editCatalog.strDescription);
                }
                break;
        }
    },

    onTreePanelBeforeLoad: function(store, operation){
        if (!store.getProxy().api) {
            return;
        }
        store.getProxy().api.read = '../Inventory/api/Catalog/GetCatalogsByParentId?ParentId=' + operation.config.node.get('intCatalogId') + '';
    },

    init: function(application) {
        this.control({
            "#btnAddCatalog": {
                click: this.onbtnAddCatalogClick
            },
            "#btnEditCatalog": {
                click: this.onbtnEditCatalogClick
            },
            "#btnDeleteCatalog": {
                click: this.onbtnDeleteCatalogClick
            },
            "#grdCatalog": {
                beforeload: this.onTreePanelBeforeLoad
            },
            "#btnSave": {
                click: this.onbtnSaveClick
            },
            "#btnUndo": {
                click: this.onbtnUndoClick
            },
            "#btnClose": {
                click: this.onbtnCloseClick
            }
        });
    }
});
