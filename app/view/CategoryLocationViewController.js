/*
 * File: app/view/CategoryLocationViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Inventory.view.CategoryLocationViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.iccategorylocation',

    config: {
        binding: {
            cboLocation: {
                value: '{current.intLocationId}',
                store: '{location}'
            },
            txtCashRegisterDepartment: '{current.intRegisterDepartmentId}',
            chkUpdatePricesOnPbImports: '{current.ysnUpdatePrices}',
            chkDefaultUseTaxFlag1: '{current.ysnUseTaxFlag1}',
            chkDefaultUseTaxFlag2: '{current.ysnUseTaxFlag2}',
            chkDefaultUseTaxFlag3: '{current.ysnUseTaxFlag3}',
            chkDefaultUseTaxFlag4: '{current.ysnUseTaxFlag4}',
            chkDefaultBlueLaw1: '{current.ysnBlueLaw1}',
            chkDefaultBlueLaw2: '{current.ysnBlueLaw2}',
            txtDefaultNucleusGroupId: '{current.intNucleusGroupId}',
            txtTargetGrossProfitPercent: '{current.dblTargetGrossProfit}',
            txtTargetInventoryAtCost: '{current.dblTargetInventoryCost}',
            txtCostOfInventoryAtBom: '{current.dblCostInventoryBOM}',
            txtLowGrossMarginPercentAlert: '{current.dblLowGrossMarginAlert}',
            txtHighGrossMarginPercentAlert: '{current.dblHighGrossMarginAlert}',
            dtmLastInventoryLevelEntry: '{current.dtmLastInventoryLevelEntry}',
            chkNonRetailUseDepartment: '{current.ysnNonRetailUseDepartment}',
            chkReportInNetOrGross: '{current.ysnReportNetGross}',
            chkDepartmentForPumps: '{current.ysnDepartmentForPumps}',
            cboConvertToPaidout: {
                value: '{current.intConvertPaidOutId}',
                store: '{paidout}'
            },
            chkDeleteFromRegister: '{current.ysnDeleteFromRegister}',
            chkDepartmentKeyTaxed: '{current.ysnDeptKeyTaxed}',
            cboDefaultProductCode: {
                value: '{current.intProductCodeId}',
                store: '{product}',
                defaultFilters: [
                    {
                        column: 'intCompanyLocationId',
                        value: '{current.intLocationId}'
                    }
                ]
            },
            cboDefaultFamily: {
                value: '{current.intFamilyId}',
                store: '{family}',
                defaultFilters: [{
                    column: 'strSubcategoryType',
                    value: 'F',
                    conjunction: 'and'
                }]
            },
            cboDefaultClass: {
                value: '{current.intClassId}',
                store: '{class}',
                defaultFilters: [{
                    column: 'strSubcategoryType',
                    value: 'C',
                    conjunction: 'and'
                }]
            },
            chkDefaultFoodStampable: '{current.ysnFoodStampable}',
            chkDefaultReturnable: '{current.ysnReturnable}',
            chkDefaultSaleable: '{current.ysnSaleable}',
            chkDefaultPrepriced: '{current.ysnPrePriced}',
            chkDefaultIdRequiredLiquor: '{current.ysnIdRequiredLiquor}',
            chkDefaultIdRequiredCigarette: '{current.ysnIdRequiredCigarette}',
            txtDefaultMinimumAge: '{current.intMinimumAge}'
        }
    },

    setupContext : function(options){
        var me = this,
            win = me.getView(),
            store = Ext.create('Inventory.store.CategoryLocation', { pageSize: 1 });

        win.context = Ext.create('iRely.Engine', {
            window : win,
            store  : store,
            binding: me.config.binding,
            createRecord: {
                fn: me.createRecord,
                scope: me
            }
        });

        return win.context;
    },

    show : function(config) {
        "use strict";

        var me = this,
            win = this.getView();

        if (config) {
            win.show();

            var context = win.context ? win.context.initialize() : me.setupContext();
            me.intCategoryId = config.param.CategoryId;
            if (config.param.action === 'new') {
                context.data.addRecord();
            } else {
                var filter = [{
                    column: 'intCategoryLocationId',
                    value: config.param.CategoryLocationId
                }];
                context.data.load({
                    filters: filter
                });
            }
        }
    },

    createRecord: function(config, action) {
        var me = this;
        var record = Ext.create('Inventory.model.CategoryLocation');
        record.set('intCategoryId', me.intCategoryId);
        if (app.DefaultLocation > 0)
            record.set('intLocationId', app.DefaultLocation);
        action(record);
    }
});
