/*
 * File: app/view/CategoryLocationViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Inventory.view.CategoryLocationViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.iccategorylocation',

    config: {
        binding: {
            cboLocation: {
                value: '{current.strLocationName}',
                store: '{location}'
            },
            txtCashRegisterDepartment: '{current.intRegisterDepartmentId}',
            chkUpdatePricesOnPbImports: '{current.ysnUpdatePrices}',
            chkDefaultUseTaxFlag1: '{current.ysnUseTaxFlag1}',
            chkDefaultUseTaxFlag2: '{current.ysnUseTaxFlag2}',
            chkDefaultUseTaxFlag3: '{current.ysnUseTaxFlag3}',
            chkDefaultUseTaxFlag4: '{current.ysnUseTaxFlag4}',
            chkDefaultBlueLaw1: '{current.ysnBlueLaw1}',
            chkDefaultBlueLaw2: '{current.ysnBlueLaw2}',
            txtDefaultNucleusGroupId: '{current.intNucleusGroupId}',
            txtTargetGrossProfitPercent: '{current.dblTargetGrossProfit}',
            txtTargetInventoryAtCost: '{current.dblTargetInventoryCost}',
            txtCostOfInventoryAtBom: '{current.dblCostInventoryBOM}',
            txtLowGrossMarginPercentAlert: '{current.dblLowGrossMarginAlert}',
            txtHighGrossMarginPercentAlert: '{current.dblHighGrossMarginAlert}',
            dtmLastInventoryLevelEntry: '{current.dtmLastInventoryLevelEntry}',
            chkNonRetailUseDepartment: '{current.ysnNonRetailUseDepartment}',
            chkReportInNetOrGross: '{current.ysnReportNetGross}',
            chkDepartmentForPumps: '{current.ysnDepartmentForPumps}',
            cboConvertToPaidout: {
                value: '{current.intConvertPaidOutId}',
                store: '{paidout}',
                disabled: true
            },
            chkDeleteFromRegister: '{current.ysnDeleteFromRegister}',
            chkDepartmentKeyTaxed: '{current.ysnDeptKeyTaxed}',
            cboDefaultProductCode: {
                value: '{current.strProductCodeId}',//'{current.intProductCodeId}',
                store: '{product}',
                defaultFilters: [
                    {
                        column: 'intCompanyLocationId',
                        value: '{current.intLocationId}'
                    }
                ]
            },
            cboDefaultFamily: {
                value: '{current.strFamilyId}', //'{current.intFamilyId}',
                store: '{family}',
                defaultFilters: [{
                    column: 'strSubcategoryType',
                    value: 'F',
                    conjunction: 'and'
                }]
            },
            cboDefaultClass: {
                value: '{current.strClassId}', //'{current.intClassId}',
                store: '{class}',
                defaultFilters: [{
                    column: 'strSubcategoryType',
                    value: 'C',
                    conjunction: 'and'
                }]
            },
            chkDefaultFoodStampable: '{current.ysnFoodStampable}',
            chkDefaultReturnable: '{current.ysnReturnable}',
            chkDefaultSaleable: '{current.ysnSaleable}',
            chkDefaultPrepriced: '{current.ysnPrePriced}',
            chkDefaultIdRequiredLiquor: '{current.ysnIdRequiredLiquor}',
            chkDefaultIdRequiredCigarette: '{current.ysnIdRequiredCigarette}',
            txtDefaultMinimumAge: '{current.intMinimumAge}'
        }
    },

    setupContext : function(options){
        var me = this,
            win = me.getView(),
            store = Ext.create('Inventory.store.CategoryLocation', { pageSize: 1 });

        win.context = Ext.create('iRely.Engine', {
            window : win,
            store  : store,
            //include: 'tblSMCompanyLocation',
            binding: me.config.binding,
            createRecord: {
                fn: me.createRecord,
                scope: me
            }
        });

        return win.context;
    },

    show : function(config) {
        "use strict";

        var me = this,
            win = this.getView();

        if (config) {
            win.show();

            var context = win.context ? win.context.initialize() : me.setupContext();
            me.intCategoryId = config.param.CategoryId;
            if (config.param.action === 'new') {
                context.data.addRecord();
            } else {
                var filter = [{
                    column: 'intCategoryLocationId',
                    value: config.param.CategoryLocationId
                }];
                context.data.load({
                    filters: filter
                });
            }
        }
    },

    createRecord: function(config, action) {
        var me = this;
        var win = config.window; 
        //var cboLocation = win.down('#cboLocation'); 

        var newRecord = Ext.create('Inventory.model.CategoryLocation');
        newRecord.set('intCategoryId', me.intCategoryId);

        var defaultLocation = iRely.Configuration.Application.CurrentLocation; 

        // Set the default company location. 
        if (defaultLocation){
            newRecord.set('intLocationId', defaultLocation);

            // Get the display value for the company location. 
            Ext.create('i21.store.CompanyLocationBuffered', {
                storeId: 'icItemLocationCompanyLocation',
                autoLoad: {
                    filters: [
                        {
                            dataIndex: 'intCompanyLocationId',
                            value: defaultLocation,
                            condition: 'eq'
                        }
                    ],
                    params: {
                        columns: 'strLocationName:intCompanyLocationId:'
                    },
                    callback: function(records, operation, success){
                        var record; 
                        if (records && records.length > 0) {
                            record = records[0];
                        }

                        if(success && record){
                            newRecord.set('strLocationName', record.get('strLocationName'));
                            newRecord.set('intLocationId', record.get('intCompanyLocationId'));
                        }
                    }
                }
            });            
        }  

        action(newRecord);
    },

    onComboSelect: function (combo, records, eOpts) {
        var me = this;

        if (!combo) return;         
        
        var win = combo.up('window');
        if (!win) return; 

        var current = win.viewModel.data.current;
        if (!current) return; 

        if (!records || records.length <= 0) return;
        
        var record = records[0];

        if (combo.itemId === 'cboLocation'){
            current.set('strLocationName', record.get('strLocationName'));
            current.set('intLocationId', record.get('intCompanyLocationId'));    
        }
        else if (combo.itemId === 'cboDefaultProductCode'){
            current.set('strProductCodeId', record.get('strRegProdCode'));
            current.set('intProductCodeId', record.get('intRegProdId'));    
        }
        else if (combo.itemId === 'cboDefaultFamily'){
            current.set('strFamilyId', record.get('strSubcategoryId'));
            current.set('intFamilyId', record.get('intSubcategoryId'));    
        }
        else if (combo.itemId === 'cboDefaultClass'){
            current.set('strClassId', record.get('strSubcategoryId'));
            current.set('intClassId', record.get('intSubcategoryId'));    
        }

    },  

    init: function(application) {
        this.control({
            "#cboLocation": {
                select: this.onComboSelect
            },
            "#cboDefaultProductCode": {
                select: this.onComboSelect
            },
            "#cboDefaultFamily": {
                select: this.onComboSelect
            },
            "#cboDefaultClass": {
                select: this.onComboSelect
            },

        });
    }    
});
