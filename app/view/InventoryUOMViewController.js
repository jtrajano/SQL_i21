/*
 * File: app/view/InventoryUOMViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Inventory.view.InventoryUOMViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.icinventoryuom',

    config: {
        helpURL: '/display/DOC/Inventory+UOM',
        binding: {
            grdUOM: {
                colUOM: 'strUnitMeasure',
                colUOMSymbol: 'strSymbol',
                colUOMUnitType: {
                    dataIndex: 'strUnitType',
                    editor: {
                        store: '{unitTypes}'
                    }
                }
                ,
                colUOMDecimals: {
                    dataIndex: 'intDecimalPlaces',
                    editor: {
                        store: '{decimalPlaces}'                 
                    }   
                }
            },
            grdConversion: {
                colConversionTo: {
                    dataIndex: 'strStockUOM',
                    editor: {
                        store: '{unitMeasure}',
                        defaultFilters: [
                            {
                                column: 'intUnitMeasureId',
                                value: '{grdUOM.selection.intUnitMeasureId}',
                                condition: 'noteq',
                                conjunction: 'and'
                            },
                            {
                                column: 'strUnitType',
                                value: '{grdUOM.selection.strUnitType}',
                                conjunction: 'and',
                            }                            
                        ]
                    }
                },
                colConversion: 'dblConversionToStock'
            }
        }
    },

    show: function(config) {
        "use strict";

        var me = this,
            win = this.getView();

        if (config) {
            var context = win.context ? win.context.initialize() : me.setupContext();
            context.data.load(function (records, operation, success) {
                win.show();
            });            
        }
    },    

    setupContext: function(config){
        "use strict";
        var me = this,
            win = me.getView(),
            store = win.getViewModel().getStore('uom'), 
            gridParent = win.down('#grdUOM'),
            gridDetail = win.down('#grdConversion');            

        store = store ? store : Ext.create('Inventory.store.UnitMeasure'); 

        win.context = Ext.create('iRely.Engine', {            
            window: win,
            store: store,
            binding: me.config.binding,
            descriptor: 'grdUOM.selection',
            validateRecord: me.validateRecord, 
            enableAudit: true,
            singleGridMgr: Ext.create('iRely.grid.Manager', {
                grid: gridParent,
                deleteButton: win.down('#btnDeleteUOM')
            }),
            details: [
                {
                    key: 'tblICUnitMeasureConversions',
                    lazy: true,
                    component: Ext.create('iRely.grid.Manager', {
                        grid: gridDetail,
                        createRecord: me.createDetailRecord,
                        deleteButton : gridDetail.down('#btnDeleteConversion')
                    })
                }
            ]
        });

        // store.on('remove', function () {
        //     win.down('#grdUOM').getSelectionModel().select(0);
        // });

        // gridDetail.editingPlugin.on({
        //     beforeedit: me.onCellEditingUOMConversionBeforeEdit
        // });

        // win.context.data.on({
        //     savesuccess: Ext.bind(me.onSaveSuccess, me)
        // });
        
        return win.context;
    },

    validateRecord: function (config, action) {
        var win = config.window,
            grdConversion = win.down('#grdConversion');

        this.validateRecord(config, function (result) {
            if (result) {
                if (grdConversion.editingPlugin) {
                    grdConversion.editingPlugin.completeEdit();
                }
                action(true);
            }
        });
    },    

    onSaveSuccess: function (a, b, c) {
        var store = this.getViewModel().get('uom'),
            items = store.data.items;

            for (var i in items) {
            var detail = items[i]._tblICUnitMeasureConversions;
            if (detail && !detail.dummy) {
                if (detail.loaded)
                    detail.loaded = false;

                var filters = detail.filters;
                for (var f in filters.items) {
                    var item = filters.items[f];
                    item.config.value = item._value;
                }
            }
        }
    },

    createDetailRecord: function (config, action) {
        "use strict";

        var grid = config.grid,
            store = grid.store,
            record = Ext.create('Inventory.model.UnitMeasureConversion');

        action(record);
    },    

    onCellEditingUOMConversionBeforeEdit: function (editor, context, eOpts) {
        var ctx = context,
            record = context.record,
            data = record.data, 
            tblICUnitMeasure = data.tblICUnitMeasure ? data.tblICUnitMeasure : {}, 
            isDummy = tblICUnitMeasure.dummy;

        if (isDummy) {
            return false;
        }
    },      

    onDecimalCalculationChange: function(obj, newValue, oldValue, eOpts) {
        var win = obj.up('window');
        if (!win) return; 

        var grdConversion = win.down('#grdConversion');
        if (!grdConversion) return; 
        
        var colConversion = grdConversion.down("#colConversion"); 
        if (!colConversion) return; 

        colConversion.format = i21.ModuleMgr.Inventory.createNumberFormat(newValue);
        if (colConversion.getEditor()){
            colConversion.getEditor().decimalPrecision = newValue;
        }    
    },

    onUOMSelect: function(combo, records, eOpts) {
        if (records.length <= 0)
            return;

        var grid = combo.up('grid');
        var plugin = grid.getPlugin('cepConversion');
        var current = plugin.getActiveRecord();

        if (combo.column.itemId === 'colConversionTo')
        {
            current.set('intStockUnitMeasureId', records[0].get('intUnitMeasureId'));
            current.set('strStockUOM', records[0].get('strUnitMeasure'));
        }
    },    

    onUOMSelectionChange: function (selModel, selected, eOpts) {
        var me = this; 
        if (!selModel || !selModel.view) return; 

        var win = selModel.view.up('window');
        if (!win) return; 

        var grdConversion = win.down('#grdConversion');
        if (!grdConversion) return; 
        
        var colConversion = grdConversion.down("#colConversion"); 
        if (!colConversion) return; 

        var current = selected && selected[0] ? selected[0] : null;
        if (!current) return; 

        var intDecimalPlaces = current.get('intDecimalPlaces'); 
        intDecimalPlaces = Ext.isNumeric(intDecimalPlaces) ? intDecimalPlaces : 2; 

        colConversion.format = i21.ModuleMgr.Inventory.createNumberFormat(intDecimalPlaces);
        if (colConversion.getEditor()){
            colConversion.getEditor().decimalPrecision = intDecimalPlaces;
        } 
    },

    init: function(application) {
        this.control({
            "#cboConversionTo": {
                select: this.onUOMSelect
            },
            "#cboUOMDecimals": {
                change: this.onDecimalCalculationChange
            },
            "#grdUOM": {
                selectionchange: this.onUOMSelectionChange
            }
        });
    }
});
