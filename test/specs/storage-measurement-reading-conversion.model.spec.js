Inventory.TestUtils.testModel({
    name: "Inventory.model.StorageMeasurementReadingConversion",
    base: "iRely.BaseEntity",
    idProperty: "intStorageMeasurementReadingConversionId",
    dependencies: ["Ext.data.Field"],
    fields: [{
        "name": "intStorageMeasurementReadingConversionId",
        "type": "int",
        "allowNull": false
    }, {
        "name": "intStorageMeasurementReadingId",
        "type": "int",
        "allowNull": false
    }, {
        "name": "intCommodityId",
        "type": "int",
        "allowNull": true
    }, {
        "name": "intItemId",
        "type": "int",
        "allowNull": true
    }, {
        "name": "intStorageLocationId",
        "type": "int",
        "allowNull": true
    }, {
        "name": "intSubLocationId",
        "type": "int",
        "allowNull": true
    }, {
        "name": "dblAirSpaceReading",
        "type": "float",
        "allowNull": false
    }, {
        "name": "dblCashPrice",
        "type": "float",
        "allowNull": false
    }, {
        "name": "intSort",
        "type": "int",
        "allowNull": true
    }, {
        "name": "strCommodity",
        "type": "string",
        "allowNull": false
    }, {
        "name": "strItemNo",
        "type": "string",
        "allowNull": false
    }, {
        "name": "strStorageLocationName",
        "type": "string",
        "allowNull": false
    }, {
        "name": "strSubLocationName",
        "type": "string",
        "allowNull": false
    }, {
        "name": "dblEffectiveDepth",
        "type": "float",
        "allowNull": false
    }],
    validators: [
        [{
            "field": "strItemNo",
            "type": "presence"
        }, {
            "field": "strStorageLocationName",
            "type": "presence"
        }]
    ]
});